[{"content":"Intro This is a fun project to extract pokemon data from csv using Golang. This project was build by Ruby in this article\nSteps Open File In the main file, firstly, we open up the file and put some necessery code to handle error and to close the file after complete.\n1 2 3 4 5 f, err := os.Open(\u0026#34;pokemon.csv\u0026#34;) if err != nil { log.Fatal(\u0026#34;error open file\u0026#34;, err) } defer f.Close() Read File Then we read the file using package bufio, buffered i/o, and stored in variable r.\n1 r := bufio.NewReader(f) Looping through lines We then read all lines in the code\n1 2 3 4 5 6 7 8 9 10 11 12 for { s, err := r.ReadString(\u0026#39;\\n\u0026#39;) if err != nil \u0026amp;\u0026amp; err.Error() != \u0026#34;EOF\u0026#34; { log.Println(\u0026#34;error: \u0026#34;, err) break } else if err != nil \u0026amp;\u0026amp; err.Error() == \u0026#34;EOF\u0026#34; { break } if strings.Contains(s, \u0026#34;Grass\u0026#34;) { fmt.Print(s) } } Improve the Code Adding flag option We add feature for adding costumization for path of the file and type of the Pokemon. By adding\n1 2 3 4 path := flag.String(\u0026#34;path\u0026#34;, \u0026#34;pokemon.csv\u0026#34;, \u0026#34;path to the file that you want to load\u0026#34;) pokemonType := flag.String(\u0026#34;type\u0026#34;, \u0026#34;Grass\u0026#34;, \u0026#34;select your pokemon type\u0026#34;) flag.Parse() Then don\u0026rsquo;t forget to change hard code typing \u0026ldquo;Grass\u0026rdquo; with *pokemonType and \u0026ldquo;pokemon.csv\u0026rdquo; with *path\nIncase Sensitive Input Currently, You cannot search \u0026ldquo;Grass\u0026rdquo; by typing \u0026ldquo;grass\u0026rdquo;. By converting all data to lower case as well as input format, the search will be incase-sensitive.\n1 2 3 4 5 ... if strings.Contains(strings.ToLower(s),strings.ToLower(*pokemonType)) { fmt.Print(s) } ... Final Code Put all together in main.go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ... func main() { path := flag.String(\u0026#34;path\u0026#34;, \u0026#34;pokemon.csv\u0026#34;, \u0026#34;path to the file that you want to load\u0026#34;) pokemonType := flag.String(\u0026#34;type\u0026#34;, \u0026#34;Grass\u0026#34;, \u0026#34;select your pokemon type\u0026#34;) flag.Parse() f, err := os.Open(*path) if err != nil { log.Fatal(\u0026#34;error open file\u0026#34;, err) } defer f.Close() r := bufio.NewReader(f) for { s, err := r.ReadString(\u0026#39;\\n\u0026#39;) if err != nil \u0026amp;\u0026amp; err.Error() != \u0026#34;EOF\u0026#34; { log.Println(\u0026#34;error: \u0026#34;, err) break } else if err != nil \u0026amp;\u0026amp; err.Error() == \u0026#34;EOF\u0026#34; { break } if strings.Contains(strings.ToLower(s), strings.ToLower(*pokemonType)) { fmt.Print(s) } } } I move the file location of \u0026ldquo;pokemon.csv\u0026rdquo; to another. Then test it by running go run . -path $HOME/Sandbox/file_source/pokemon.csv -type fire\n","date":"2022-08-18T00:00:00Z","image":"https://ayw.codeberg.page/images/gopher-reading.svg","permalink":"https://ayw.codeberg.page/p/go-project-csv/","title":"Go Mini Project: Reading and Filtering csv data"},{"content":"back to Go tutorial index\nIntro This article will cover some basic theory and operation of Go programming language:\nProject Structure Working with variable and constant Working with Functions Working with Conditionals Working with Loops Array and Slices Working with Maps Working with Struct Concurency in Go Concurrency Model Go\u0026rsquo;s concurrency model\nActor Communicating Sequential Processes (CSP) Sample Go Routine Channels There are two types of channels: Unbuffered (syncronous behaviour) and buffered. The unbuffered can\u0026rsquo;t hold data. So any goroutine putting data onto one blocks until there\u0026rsquo;s a receiver on the other end. Well, on the other hand, buffered channels, they can hold data, so a Goroutine can drop data onto it and crack straight on with whatever it was doing without having to care if there\u0026rsquo;s a receiver on the other end.\nTo create an unbuffered channel, we can use make with the chan keyword, e.g. myChann := make(chan int). And then, obviously, Go wants to know the type of data the channel is going to hold. But to make it buffered, all we do is add buffers. So this one here will have 5, myChann := make(chan int, 5), and because it\u0026rsquo;s for int, it means it can hold up to 5 ints.\nThe effect of a buffered channel is that goroutines using it don\u0026rsquo;t need to block. In fact, actually, as long as the channel is not full, other goroutines can come along after and can also put data on it. So proper asynchronous behavior. Now, obviously, if buffered channel is full, then any goroutines wanting to use it are going to block until it frees up. And then, likewise, if a receiver is trying to grab data off of a channel and the data\u0026rsquo;s not there yet, well that blocks until it is.\n","date":"2022-08-17T00:00:00Z","image":"https://ayw.codeberg.page/images/go.png","permalink":"https://ayw.codeberg.page/p/go-basic/","title":"Go Basic Syntax Operation"},{"content":"back to Go tutorial index\nIntro Understanding object-oriented implementation in Go is very important to build scalable app. Source for this article can be downloaded here\nTraditional Object Orientation Object orientation is about isolating objects one from another so that each aspect of our system can interact with another, but not have to be overly concerned about the implementation details of the objects that they\u0026rsquo;re interacting with.\nWhen we start to break down an object-oriented system, there are several features that the object exhibit in order to allow us to establish this separation of concern.\nThe first characteristic of an object-oriented system is something called encapsulation and that\u0026rsquo;s that idea that we\u0026rsquo;re going to interact with objects through their methods, but we\u0026rsquo;re not going to understand the details of how those objects are going to accomplish the functionality that we\u0026rsquo;re asking them to. So for example, when we\u0026rsquo;re interacting with a TCP connection handler object, we don\u0026rsquo;t know how it\u0026rsquo;s managing that connection. So it might have a direct connection to the port, or it might have another object that it\u0026rsquo;s using to manage that port, or it might be managing the state some other way. The point with encapsulation is, we don\u0026rsquo;t know, and we don\u0026rsquo;t have to care. That\u0026rsquo;s the responsibility of the TCP connection handler. We just know that it can provide us some functionality and we\u0026rsquo;re going to take advantage of that functionality.\nThe next characteristic is message passing. So one of the things that we want to be able to do when we\u0026rsquo;re interacting with these objects is we don\u0026rsquo;t want to have anymore information about the object that we need. So when we want to invoke some functionality, sometimes we want to know exactly the functionality that we want to invoke, and that\u0026rsquo;s not going to be message passing, that\u0026rsquo;s directly calling a method on an object that we\u0026rsquo;re working with. But sometimes, we want to allow that object flexibility for exactly how that message is going to be interpreted. So in those situation we\u0026rsquo;re going to do what\u0026rsquo;s called message passing where we\u0026rsquo;re going to provide a message, but we\u0026rsquo;re not going to have any opinion on how that object is going to interpret that message, or if it does anything with it at all.\nThe next characteristic that we\u0026rsquo;re used to seeing in an object-oriented system is a concept called inheritance, where we can have a base type, often called a class in many languages, and we can derive descendent types from that. Now in Go we don\u0026rsquo;t have capability, there is no inheritance model in Go, but we will talk about another mechanism that is present in the Go language.\nAnd the final characteristic that we\u0026rsquo;re going to be focusing on in an object-oriented system is this concept of polymorphism. Now polymorphism is the ability to have multiple types stand in for some common type. So in our payment processing system, we might have a payment option type, and then we might have implementing that type, a credit card payment method, we might have a checking account payment method, we might have a cash payment method, and all of those can operate as a payment option in our system. And when we work with types that way, they\u0026rsquo;re going to be working polymorphically, which means we don\u0026rsquo;t really care about the underlying type, we just know that it\u0026rsquo;s going to expose some capabilities that we\u0026rsquo;re interested in.\nTo sum up:\nBy encapsulation, we isolate our objects from one another so that they don\u0026rsquo;t have access to one another\u0026rsquo;s data By passing messages, we\u0026rsquo;re not going to understand as we ask an object to perform some behaviour, we\u0026rsquo;re not going to be sure of that exact behaviour that it\u0026rsquo;s going to invoke. We just know that we\u0026rsquo;re asking it to do something, we\u0026rsquo;re relying on it to understand how to do that work. With inheritance, we\u0026rsquo;re going to be able to work with some kind of a super type, and that supertype is going to be able to delegate functionality down to its children. And then with polymorphism we\u0026rsquo;re going to have a common abstract type of some sort, and we\u0026rsquo;re going to be able to interact with that abstraction without actually understanding the underlying implementation. OOP in Go Just to name some of the challenges that we\u0026rsquo;re going to be facing,\nGo is not a class and object language, Go doesn\u0026rsquo;t have the concept of private data, Go doesn\u0026rsquo;t support inheritance Go doesn\u0026rsquo;t have abstract base types OOP Concept in Go\nMethods: So while Go doesn\u0026rsquo;t have a traditional class structure, we can take data structures and attach functions to them, turning them into methods, Package oriented design: So while Go doesn\u0026rsquo;t have the concept of private data, meaning data that\u0026rsquo;s private to a class or to a data structure, we do have the concept of package-level data. So if we change our design prespective from a class-oriented design, which is what a lot of object-oriented programming languages drive us to, and focus instead on a package-orientated design, then I think we\u0026rsquo;re going to see that a lot of our problems go away. Type embedding: That\u0026rsquo;s going to allow us to gain a lot of the advantages of an inheritance-based system without a lot of baggage. Interface: is relied on heavily in the Go language to provide a lot of the object-orientated characteristics that we\u0026rsquo;re going to be talking about. Practicing We\u0026rsquo;re going to practice object-oriented design implementation in payment study case.\nEncapsulation Accessing a service on an object without knowing how that service is implemented.\nTwo tools in Go for encapsulation, package-oriented design and interface. To encapsulate application data in Go means separating the data that the object can make available from how that object is actually storing it or retrieving it.\nPackage-oriented Design We want to start by defining a data structure for a credit card in gopherpay/payment/payment.go\n1 2 3 4 5 6 7 8 9 10 11 package payment type CreditCard struct { ownerName string cardNumber string expirationMonth int expirationYear int securityCode int availableCredit float32 } ... The available credit being stored internal to the credit card structure is really a design decision that we need to make, because we might decide we\u0026rsquo;re going to access that available every time through web server or we might use the web service to populate this first time we access the data.\nNow the first challange that we have with this type is we can\u0026rsquo;t actually build one from outside of the package, because all of the fields are internal and private to the package.\nSo a typical one to get around that is by adding a constructor function as you see here\n1 2 3 4 5 6 7 8 9 10 11 ... func CreateCreditAccount(ownerName, cardNumber string, expirationMonth, expirationYear, securityCode int) *CreditCard { return \u0026amp;CreditCard{ ownerName: ownerName, cardNumber: cardNumber, expirationMonth: expirationMonth, expirationYear: expirationYear, securityCode: securityCode, } } ... Now that we have the ability to create the credit card, we need to allow the consumers of this credit card to be able to interact with it, because now they can create credit card, but they still can\u0026rsquo;t access any of the data that is stored or any the behaviors that we want to expose. So we add few methods below\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 ... func (c CreditCard) OwnerName() string { return c.ownerName } func (c *CreditCard) SetOwnerName(value string) error { if len(value) == 0 { retrun errors.New(\u0026#34;invalid owner name provided\u0026#34;) } c.ownerName = value return nil } func (c CreditCard) CardNumber() string { return c.cardNumber } var cardNumberPattern = regexp.MustCompile(\u0026#34;\\\\d{4}-\\\\d{4}-\\\\d{4}-\\\\d{4}\u0026#34;) func (c *CreditCard) SetCardNumber(value string) error { if !cardNumberPattern.Match([]byte(value)) { return erros.New(\u0026#34;Invalid credit card number format\u0026#34;) } c.cardNumber = value return nil } func (c CreditCard) ExpirationDate() (int, int) { return c.expirationMonth, c.expirationYear } func (c *CreditCard) SetExpirationDate(month, year int) error { now := time.Now() if year \u0026lt; now.Year() || (year == now.Year() \u0026amp;\u0026amp; time.Month(month) \u0026lt; now.Month()) { return errors.New(\u0026#34;Epiration date must lie in the future\u0026#34;) } c.expirationMonth, c.expirationYear = month, year return nil } func (c CreditCard) SecurityCode() int { return c.securityCode } func (c *CreditCard) SetSecurityCode(value int) error { if value \u0026lt; 100 || value \u0026gt; 999 { return errors.New(\u0026#34;Security code is not valid\u0026#34;) } c.securityCode = value return nil } func (c CreditCard) AvailableCredit() float32 { return 5000 // this come from web service, client doesn\u0026#39;t know or care } Naming conventions for accessor methods above is to name accessor method for getters the same name as the the field that you\u0026rsquo;re getting the data from. So for example, the accessor for ownerName is going to be OwnerName method, we\u0026rsquo;re just going to capitalize the field name instead of using lowercase. If we need to make an accessor method available that\u0026rsquo;s going to set the data, then you just prefix that method with set. So the ability to set the ownerName is going to be given the method name SetOwnerName.\nDon\u0026rsquo;t Overuse: There are certainly times when you should design a data structure that accessor methods for some or all of its properties, and you might not make some of those properties available at all, you\u0026rsquo;re going to encapsulate that data within the package. However, if you just designing a data structure that\u0026rsquo;s going to be passing JSON data back and forth between a web client and your application, then you probably don\u0026rsquo;t need to create accessor methods, just use a simple data structure with publicly accessible fields.\nNow we are going to drop simple implementation in client gopherpay/client/main.go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ... func main() { credit := payment.CreateCreditAccount( \u0026#34;Don Krieg\u0026#34;, \u0026#34;1111-2222-3333-4444\u0026#34;, 5, 2044, 323) fmt.Printf(\u0026#34;Owner name: %v\\n\u0026#34;, credit.OwnerName()) fmt.Printf(\u0026#34;Card Number: %v\\n\u0026#34;, credit.CardNumber()) fmt.Println(\u0026#34;Trying to change card number\u0026#34;) if err := credit.SetCardNumber(\u0026#34;invalid\u0026#34;); err != nil { fmt.Printf(\u0026#34;That didn\u0026#39;t work: %v\\n\u0026#34;, err) } fmt.Printf(\u0026#34;Available credit: %v\\n\u0026#34;, credit.AvailableCredit()) } Interface Now in this case, the data structure is going to be package scoped. So we will create creditAccount struct with lowercase c that means that the data structure creditAccount is not going to be available outside of the payment package. To make it available, we are going to define an interface, PaymentOption, and it\u0026rsquo;s going to define the accessor methods that are going to be available to access the credit account\u0026rsquo;s data.\nAdd PaymentOption interface before data structure\n1 2 3 type PaymentOption interface { ProcessPayment(float32) bool } To implement this interface, we\u0026rsquo;re going to add method below after CreateCreditAccount func.\n1 2 3 4 func (c *CreditCard) ProcessPayment(amount float32) bool { fmt.Prinln(\u0026#34;processing credit card payment..\u0026#34;) return true } The nice thing about interface is we\u0026rsquo;re encapsulating not just the data, but the actual type that\u0026rsquo;s being called. So create another file cash.go in payment package to hold another payment method.\n1 2 3 4 5 6 7 8 9 10 11 12 package payment type Cash struct{} func CreateCashAccount() *Cash { return \u0026amp;Cash{} } func (c Cash) ProcessPayment(amount float32) bool { fmt.Prinln(\u0026#34;processing cash transaction....\u0026#34;) return true } In the main function, we peform client action\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ... func main() { var option payment.PaymentOption // peform credit payment option := payment.CreateCreditAccount( \u0026#34;Don Krieg\u0026#34;, \u0026#34;1111-2222-3333-4444\u0026#34;, 5, 2044, 323) option.ProcessPayment(500) // peform cash transaction option = payment.CreateCashAccount() option.ProcessPayment(500) } Message Passing Sending a message to an object, but letting that object determine what to do with it.\nThe first strategy is using interface to establish that abstraction layer. The second is going to be the use of channels to allow as to abstract the sender of a message from the receiver of that message.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ... type CreditAccount struct{} // package scoped func (c *CreditAccount) processPayment(amount float32) { fmt.Println(\u0026#34;Processing credit card payment....\u0026#34;) } // construction method func CreateCreditAccount(chargeCh chan float32) *CreditAccount { creditAccount := \u0026amp;CreditAccount{} go func(chargeCh chan float32) { for amount := range chargeCh { creditAccount.processPayment(amount) } }(chargeCh) return creditAccount } func main() { // creating channel chargeCh := make(chan float32) // pass into construction function CreateCreditAccount(chargeCh) // pass message into that channel // we don\u0026#39;t know what service is being invoked chargeCh \u0026lt;- 500 // just to keep main func from shutting down too early var a string fmt.Scanln(\u0026amp;a) } Inheritance / Composition Inheritance : Behavior reuse strategy where a type is based upon another type, allowing it to inherit functionality from the base type.\nComposition : Behavior reuse strategy where a type contains objects that have desired functionality. The type delegates calls to those object to use their behaviours.\nHere is the example creating HybridAccount that use embeded functionality of CheckingAccount.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ... type CreditAccount struct{} func (c *CreditAccount) AvailableFunds() float32 { fmt.Println(\u0026#34;Getting credit funds\u0026#34;) return 250 } type CheckingAccount struct{} func (c *CheckingAccount) AvailableFunds() float32 { fmt.Println(\u0026#34;Getting checking funds\u0026#34;) return 125 } type HybridAccount struct { CreditAccount CheckingAccount } func (h *HybridAccount) AvailableFunds() float32 { return h.CreditAccount.AvailableFunds() + h.CheckingAccount.AvailableFunds() } func main() { ha := \u0026amp;HybridAccount{} fmt.Println(ha.AvailableFunds) } Polymorphism The ability to transparently substitute a family of types that implement a common set of behavior.\nAgain, for this feature we\u0026rsquo;re going to use interface. Interfaces are implicitly implemented in Go.\nInterfaces can be used to provide encapsulation by abstracting away the service that\u0026rsquo;s being provided when we invoke that method through the interface. Interfaces provide us a level of message passing, because we don\u0026rsquo;t know the method that\u0026rsquo;s actually being called when we call through the interface. If we\u0026rsquo;re working with interfaces and we\u0026rsquo;re interacting with third-party libraries, make sure that your consuming packages define the interfaces.\n","date":"2022-08-16T00:00:00Z","image":"https://ayw.codeberg.page/images/go.png","permalink":"https://ayw.codeberg.page/p/go-oop/","title":"Object Oriented in Go"},{"content":"Installation There are several ways how to install or use Docker.\nWindows WSL is my favorit tool to run Docker in Windows machine.\nLima in MacOS For using Docker in MacOS, I prefer to use Lima. It\u0026rsquo;s like WSL tool in MacOS.\nInstall lima using brew:\n1 brew install lima To create an instance \u0026ldquo;default\u0026rdquo; from a template \u0026ldquo;docker\u0026rdquo;:\n1 limactl start --name=default template://docker The command is structured as:\n1 limactl start [--name=NAME] [--tty=false] \u0026lt;template://TEMPLATE\u0026gt; To see template list:\n1 limactl start --list-templates To show the instance:\n1 limactl list [--json] Stop the instance:\n1 limactl stop [--force] \u0026lt;INSTANCE\u0026gt; Docker/Lima Cheatsheet Some syntax also apply to Lima by changing docker with lima nerdctl or nerdctl.lima\nDocker elements There are four important elements (or management command) in Docker:\nimage container volume network Common syntax list of the element run docker \u0026lt;element\u0026gt; ls, e.g. docker volume ls To see list of image, beside docker image ls, you can use docker images see help for using list command run docker \u0026lt;element\u0026gt; ls --help, e.g. docker container ls --help clean up the element run docker \u0026lt;element\u0026gt; prune, e.g. docker image prune see option flag for using prune docker \u0026lt;element\u0026gt; prune --help, e.g. docker network prune --help remove the element docker \u0026lt;element\u0026gt; rm \u0026lt;option if any\u0026gt; \u0026lt;element_name or id\u0026gt; see option for removing the element docker \u0026lt;element\u0026gt; rm --help see option for list of the elements and others management commands and the command list docker --help check command available in a management command, for instance docker swarm --help Delete Image Delete unused image 1 docker image prune -a Since nerdctl doesn\u0026rsquo;t support prune, we can use 1 nerdctl.lima image rm $(nerdctl.lima image ls -q) Stop Container Stop all container with Docker 1 docker kill $(docker ps -q) Stop all container with Lima 1 nerdctl.lima kill $(nerdctl.lima ps -a -q) Remove Container To remove all container with Docker, we can use command prune 1 docker container prune [OPTIONS] Alternatively, you can use: 1 docker rm $(docker ps -a -q) For Lima 1 nerdctl.lima rm $(nerdctl.lima ps -a -q) Remove volume Lima 1 nerdctl.lima volume rm $(nerdctl.lima volume ls -q) Docker 1 docker volume prune Query and Filter Filtering column 1 docker ps | awk \u0026#39;{print $3}\u0026#39; Show volume related to container 1 docker ps -a --no-trunc --format \u0026#34;{{.ID}}\\t{{.Names}}\\t{{.Mounts}}\u0026#34; Creating Container Create nginx instance with Docker 1 docker run -d --name nginx -p 127.0.0.1:8080:80 nginx:alpine or use Lima\n1 lima nerdctl run -d --name nginx -p 127.0.0.1:8080:80 nginx:alpine http://127.0.0.1:8080 is accessible from both macOS and Linux.\nOther containers can be seen below\nRedis Instance Running with Docker\n1 docker run --name some-redis -p 6379:6379 -d redis Running with Lima\n1 nerdctl.lima run --name test-redis -p 6379:6379 -d redis For checking logs of the container, we can run this command:\n1 nerdctl.lima container logs test-redis MySQL Instance 1 2 3 lima nerdctl run --detach --name=mysql-container -p 52000:3306 \\ -e MYSQL_ROOT_PASSWORD=mypassword \\ mysql:5.7.38-debian PostgreSQL Instance Change lima nerdctl below with docker if you use Docker. Copy the lines to online notepad, change and copy again to your terminal.\n1 2 3 4 5 6 lima nerdctl run -d --name=test-pg -p 52000:5432 \\ -e POSTGRES_DB=test_db \\ -e POSTGRES_USER=root \\ -e POSTGRES_PASSWORD=root \\ -v /tmp/lima/pgdata:/var/lib/postgresql \\ postgres:13.7 If you set POSTGRES_HOST_AUTH_METHOD=trust, then POSTGRES_PASSWORD is not required. My best practice, always set root for DB and user, POSTGRES_DB=root and POSTGRES_USER=root, in the first time and create custom user and database later. See my PostgreSQL article here.\nNow let\u0026rsquo;s play around by entering container shell\n1 nerdctl.lima exec -ti test-pg sh Then enter to psql compiler by typing psql. But, Ops, you should be get an error \u0026lsquo;database \u0026ldquo;root\u0026rdquo; does not exist\u0026rsquo;. Try to specify database - we\u0026rsquo;ve already created - that we want to connect.\n1 psql -d test_db And, Wola, you should be success to access psql compiler. Anyway, you also can check it by using VSCode database client.\npgAdmin Instance 1 2 3 4 docker run -d --name pgadmin_container -p 5050:80 \\ -e PGADMIN_DEFAULT_EMAIL=admin@admin.com \\ -e PGADMIN_DEFAULT_PASSWORD=root \\ dpage/pgadmin4 After running code above, you can open pgAdmin in your browser with address localhost:5050. To connect with existing PostgreSQL container, you should know what IPAddress of the container by running\n1 docker inspect pg_container | grep IPAddress And you\u0026rsquo;ll get result something like this\n1 2 3 \u0026#34;SecondaryIPAddresses\u0026#34;: null, \u0026#34;IPAddress\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;IPAddress\u0026#34;: \u0026#34;172.18.0.2\u0026#34;, Put the IPAddress value on the server configuration located in Object \u0026gt; Create \u0026gt; Server:\nStacks Lima can use compose up feature like Docker or Podman. I write down some example stacks. Save codes in, for instance, stack.yml in the folder /tmp/lima then run\n1 lima nerdctl compose up --file stack.yml Stack Postgresql + Adminer It is an example use compose to create Postgrs instance.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Use postgres/example user/password credentials version: \u0026#39;3.1\u0026#39; services: db: image: postgres restart: always environment: POSTGRES_PASSWORD: example adminer: image: adminer restart: always ports: - 8080:8080 Stack Postgre + pgAdmin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 version: \u0026#39;3.8\u0026#39; services: db: container_name: pg_container image: postgres restart: always environment: POSTGRES_USER: root POSTGRES_PASSWORD: root POSTGRES_DB: test_db ports: - \u0026#34;5432:5432\u0026#34; pgadmin: container_name: pgadmin4_container image: dpage/pgadmin4 restart: always environment: PGADMIN_DEFAULT_EMAIL: admin@admin.com PGADMIN_DEFAULT_PASSWORD: root ports: - \u0026#34;5050:80\u0026#34; References:\nCoding Notes by aysf Difference between Docker \u0026lsquo;stop\u0026rsquo; and \u0026lsquo;kill\u0026rsquo; How to stop all docker containers How to access docker volumes Docker docs reference for \u0026lsquo;ps\u0026rsquo; command How to access volume data ","date":"2022-07-06T00:00:00Z","image":"https://upload.wikimedia.org/wikipedia/commons/4/4e/Docker_%28container_engine%29_logo.svg","permalink":"https://ayw.codeberg.page/p/docker-cheatsheet/","title":"Docker Cheatsheet"},{"content":"Motivation During my work in Geniox mobile, I face responsibility to maintain Golang service that connects to the SFTP server. The existing code is pretty advanced, therefore I decided to learn from basic, main source of Golang package (https://pkg.go.dev/). Moreover, It\u0026rsquo;s better for us to understand the fundamentals of File Transfer Protocol before jumping to the code.\nFTP Concept Fundamental FTP is very important to understand. If somehow you should use other programming languages or face other problems that force you to interact with SFTP, this information will help you since the concept remains the same.\nWhat is SFTP SFTP is stand for SSH File Transfer Protocol (or sometimes called \u0026lsquo;Secure\u0026rsquo; File Tranfer Protocol). In ordinary FTP, file tranfered without encryption, making data readable for anyone who intercepts it. While this is fine if you\u0026rsquo;re just sending unimportant files, this could lead to major data compromises if you\u0026rsquo;re sending crucial data (ftptoday).\nAdvantages of using (s)FTP It allows you to transfer multiple files and folders When the connection is lost then it has the ability to resume the transfer There is no limitation on the size of the file to be transferred. The browsers allow a transfer of only up to 2GB. Many FTP clients like FileZilla have the ability to schedule the transfers. The data transfer is faster than HTTP. The items that are to be uploaded or downloaded are added to the \u0026lsquo;queue\u0026rsquo;. The FTP client can add items to the \u0026lsquo;queue\u0026rsquo;. source: afteracademy\nGlossary SSH Key An SSH key is a secure access credential used in Secure Shell (SSH) protocol. SSH keys use key pairs based on public key infrastructure (PKI) technology, the gold standard for digital identity authentication and encryption, to provide a secure and scalable method of authentication. (source: sectigo)\nPublic Key and Private Key An SSH key relies upon the use of two related keys, a public key and a private key, that together create a key pair that is used as the secure access credential. The private key is secret, known only to the user, and should be encrypted and stored safely. The public key can be shared freely with any SSH server to which the user wishes to connect. (source: sectigo)\nUploading Transferring files from a client computer to a server computer (source: deskshare)\nDownloading Transferring files from a server to a client (source: deskshare)\nControl Connection The FTP client, for example, FileZilla sends a connection request usually to server port number 21. Typically a user needs to log on to the FTP server for estabilishing the connection but there are some servers that make all their content available without login. These servers are known as anonymous FTP\nData Connection For transferring the files and folder we use a separate connection called data connection (source: afteracademy)\nknown_hosts a client file containing all remotely connected hosts, and the ssh client uses this file. This file authenticates for the client to the server they are connecting to. The known_hosts file contains the host public key for all known hosts. Usually this file created automatically when client try to connect server at the first time ssh user@host or ssh user@host -p custom_port (note: you\u0026rsquo;re only be able to connect after creating ssh key e.g. ssh-keygen -t rsa). To remove host public key, we can use ssh-keygen -R \u0026quot;hostname\u0026quot;. (source: linuxhint, howtouselinux, serverfault).\nauthorized_keys a server file that houses are all SSH authentication keys that were copied to the server, from remote clients. Usually this file is located in ~/home/username/.ssh/. The ssh id can be copied by running ssh-copy-id user@host if ssh id located in the default folder, usually $HOME/.ssh/id_rsa.pub. If not, you can use ssh-copy-id path/to/id_rsa.pub user@host\nSteps to generate SSH key Client generate the key using command ssh-keygen -t rsa Enter location in which to save the keys. Typically, the keys stored in ~/home/username/.ssh/ in Linux or ~/Users/username/.ssh/ in Mac. Enter in an optional passphrase or leave empty for no passphrase. Once the pair is generated, the next step is to put the public one on the remote server using command ssh-copy-id command. (source: sectigo)\nGolang Snippet I combine example code in the sftp here and ssh here and also a little help from stackoverflow here\nSFTP Example This example is written as package sftp. The code I copied directly from here\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 ... func main() { var conn *ssh.Client // open an SFTP session over an existing ssh connection. client, err := sftp.NewClient(conn) if err != nil { log.Fatal(err) } defer client.Close() // walk a directory w := client.Walk(\u0026#34;/home/user\u0026#34;) for w.Step() { if w.Err() != nil { continue } log.Println(w.Path()) } // leave your mark f, err := client.Create(\u0026#34;hello.txt\u0026#34;) if err != nil { log.Fatal(err) } if _, err := f.Write([]byte(\u0026#34;Hello world!\u0026#34;)); err != nil { log.Fatal(err) } f.Close() // check it\u0026#39;s there fi, err := client.Lstat(\u0026#34;hello.txt\u0026#34;) if err != nil { log.Fatal(err) } log.Println(fi) } On the line number #3, a SSH connection is estabilished. Then the connection is used in the next code ln #6. The code for generating this SSH connection will be explained on the next session.\nSSH Example To get SSH connection, we should take a look at other examples from pkg.go.dev. There are two ways of example how to make SSH connection, password (example-dial) and public key (example-PublicKeys). I combine both auth method and get the following code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 ... func main() { var hostKey ssh.PublicKey // An SSH client is represented with a ClientConn. // // A public key may be used to authenticate against the remote // server by using an unencrypted PEM-encoded private key file. // // If you have an encrypted private key, the crypto/x509 package // can be used to decrypt it. key, err := ioutil.ReadFile(\u0026#34;/home/user/.ssh/id_rsa\u0026#34;) if err != nil { log.Fatalf(\u0026#34;unable to read private key: %v\u0026#34;, err) } // Create the Signer for this private key. signer, err := ssh.ParsePrivateKey(key) if err != nil { log.Fatalf(\u0026#34;unable to parse private key: %v\u0026#34;, err) } // To authenticate with the remote server you must pass at least one // implementation of AuthMethod via the Auth field in ClientConfig, // and provide a HostKeyCallback. config := \u0026amp;ssh.ClientConfig{ User: \u0026#34;username\u0026#34;, Auth: []ssh.AuthMethod{ ssh.Password(\u0026#34;yourpassword\u0026#34;), // Use the PublicKeys method for remote authentication. ssh.PublicKeys(signer), }, HostKeyCallback: ssh.FixedHostKey(hostKey), } client, err := ssh.Dial(\u0026#34;tcp\u0026#34;, \u0026#34;yourserver.com:22\u0026#34;, config) if err != nil { log.Fatal(\u0026#34;Failed to dial: \u0026#34;, err) } defer client.Close() // Each ClientConn can support multiple interactive sessions, // represented by a Session. session, err := client.NewSession() if err != nil { log.Fatal(\u0026#34;Failed to create session: \u0026#34;, err) } defer session.Close() // Once a Session is created, you can execute a single command on // the remote side using the Run method. var b bytes.Buffer session.Stdout = \u0026amp;b if err := session.Run(\u0026#34;/usr/bin/whoami\u0026#34;); err != nil { log.Fatal(\u0026#34;Failed to run: \u0026#34; + err.Error()) } fmt.Println(b.String()) } The auth method using PublicKey doesn\u0026rsquo;t require password but the server should have public key of client on server\u0026rsquo;s authorized_keys.\nGetting Host PublicKey From stackoverflow, I get this lines\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 func getHostKey(host string) (ssh.PublicKey, error) { file, err := os.Open(filepath.Join(os.Getenv(\u0026#34;HOME\u0026#34;), \u0026#34;.ssh\u0026#34;, \u0026#34;known_hosts\u0026#34;)) if err != nil { return nil, err } defer file.Close() scanner := bufio.NewScanner(file) var hostKey ssh.PublicKey for scanner.Scan() { fields := strings.Split(scanner.Text(), \u0026#34; \u0026#34;) if len(fields) != 3 { continue } if strings.Contains(fields[0], host) { var err error hostKey, _, _, _, err = ssh.ParseAuthorizedKey(scanner.Bytes()) if err != nil { return nil, errors.New(fmt.Sprintf(\u0026#34;error parsing %q: %v\u0026#34;, fields[2], err)) } break } } if hostKey == nil { return nil, errors.New(fmt.Sprintf(\u0026#34;no hostkey for %s\u0026#34;, host)) } return hostKey, nil } Entire Code Mixing up the code together, finally I get this code running and hit the SFTP server.\nNext Question Still, I have some of question in my mind regarding SFTP and SSH. Firstly, How if someone steal the known_hosts file and put it onto his/her laptop and try to access the server. Could he/she impersonante the origin client and access the server?. Second, Is there anyway to make our the known_hosts safer? by adding salt or hash perhaps, so the thief couldn\u0026rsquo;t see what hostname server connecting to the client.\nReferences:\nCoding Notes by aysf ","date":"2022-07-03T00:00:00Z","image":"https://ayw.codeberg.page/p/go-snippet-sftp/sftp.svg","permalink":"https://ayw.codeberg.page/p/go-snippet-sftp/","title":"Golang Snippet for SFTP Client"},{"content":"Motivation During my work in Geniox mobile, I face responsibility to maintain Golang service that handle millions of request a day. Therefore, I have to undersand message queue concept to do this job.\nMessage Queue (MQ) A message queue (MQ) is a form asynchronous service-to-service used in serverless and microservices architectures (or distributed systems) to communicate with one another. (source Baeldung, aws).\nThis term consist of two words, message and queue.\nMessage The message might be:\ndata needs to get transmitted types of data formats Queue kind of a line of things that a process sequentially. Implementing MQ with Golang This snippet I created based on this article from Vultr.\nPrerequisites To follow this tutorrial, you need to have\nDocker for creating MySQL database and Redis container Golang Package Database Container We will run container instances for Redis and MySQL. First, clone this repo https://github.com/aysf/example, then go to redis folder, pick the simple one redis-with-config, and run up the docker-compose.\nFor MySQL, do the similar steps as above.\nPrepare SQL Database Enter to docker container docker exec -it mysqldb /bin/sh Run mysql -u root -p. If it doesn\u0026rsquo;t work, prepend sudo on the command and try again. Enter root password that you\u0026rsquo;ve set on docker-compose.yaml and press enter Create web_payments database by using 1 2 3 4 mysql\u0026gt; CREATE DATABASE web_payments; CREATE USER \u0026#39;web_payments_user\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED WITH mysql_native_password BY \u0026#39;EXAMPLE_PASSWORD\u0026#39;; GRANT ALL PRIVILEGES ON web_payments.* TO \u0026#39;web_payments_user\u0026#39;@\u0026#39;localhost\u0026#39;; FLUSH PRIVILEGES; Switch to the new web_payments database: mysql\u0026gt; USE web_payments; Create a payments table 1 2 3 4 5 6 7 8 9 mysql\u0026gt; CREATE TABLE payments ( payment_id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY, payment_date DATETIME, first_name VARCHAR(50), last_name VARCHAR(50), payment_mode VARCHAR(255), payment_ref_no VARCHAR (255), amount DECIMAL(17,4) ) ENGINE = InnoDB; logout from MySQL server: mysql\u0026gt; QUIT; Prepare Golang Apps This app is simple without app initialization go mod init app. The structure can be seen\n1 2 3 4 5 6 7 payment_gateway |-- client |\t└-- -- main.go |-- queue |\t└- -- main.go └-- worker └-- -- main.go Client Client is used for creating request simulation.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 package main import ( \u0026#34;context\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;sync\u0026#34; ) func main() { log.Println(\u0026#34;client running...\u0026#34;) ctx := context.TODO() var wg sync.WaitGroup wg.Add(1) go job(ctx, \u0026amp;wg) wg.Wait() log.Println(\u0026#34;job end\u0026#34;) } func job(ctx context.Context, wg *sync.WaitGroup) { for { select { case \u0026lt;-ctx.Done(): wg.Done() default: generateRequest() } } } func generateRequest() { jsonString := `{\u0026#34;first_name\u0026#34;: \u0026#34;MARY\u0026#34;, \u0026#34;last_name\u0026#34;: \u0026#34;SMITH\u0026#34;, \u0026#34;payment_mode\u0026#34;: \u0026#34;CHEQUE\u0026#34;, \u0026#34;payment_ref_no\u0026#34;: \u0026#34;985\u0026#34;, \u0026#34;amount\u0026#34; : 985.65}` j := strings.NewReader(jsonString) resp, err := http.Post(\u0026#34;http://127.0.0.1:8080/payments\u0026#34;, \u0026#34;application/json\u0026#34;, j) if err != nil { log.Println(err) } else { log.Println(\u0026#34;request generated...\u0026#34;) log.Println(\u0026#34;response: \u0026#34;, resp.StatusCode) } } Queue Queue is used for handling the massive requests from client and enqueue the request data to Redis.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 package main import ( \u0026#34;bytes\u0026#34; \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;github.com/go-redis/redis/v8\u0026#34; ) func main() { http.HandleFunc(\u0026#34;/payments\u0026#34;, paymentsHandler) http.ListenAndServe(\u0026#34;:8080\u0026#34;, nil) } func paymentsHandler(w http.ResponseWriter, req *http.Request) { redisClient := redis.NewClient(\u0026amp;redis.Options{ Addr: \u0026#34;localhost:6379\u0026#34;, Password: \u0026#34;\u0026#34;, DB: 0, }) ctx := context.TODO() buf := new(bytes.Buffer) // Include a Validation logic here to sanitize the req.Body when working in a production environment buf.ReadFrom(req.Body) paymentDetails := buf.String() err := redisClient.RPush(ctx, \u0026#34;payments\u0026#34;, paymentDetails).Err() if err != nil { fmt.Fprintf(w, err.Error()+\u0026#34;\\r\\n\u0026#34;) } else { fmt.Fprintf(w, \u0026#34;Payment details accepted successfully\\r\\n\u0026#34;) } } Worker Worker task is to process and dequeue data from Redis. This \u0026lsquo;mini-service\u0026rsquo; have to connect to database and insert the request to database.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 package main import ( \u0026#34;context\u0026#34; \u0026#34;database/sql\u0026#34; \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/go-redis/redis/v8\u0026#34; _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; ) func main() { ctx := context.TODO() redisClient := redis.NewClient(\u0026amp;redis.Options{ Addr: \u0026#34;localhost:6379\u0026#34;, Password: \u0026#34;\u0026#34;, DB: 0, }) for { result, err := redisClient.BLPop(ctx, 0*time.Second, \u0026#34;payments\u0026#34;).Result() if err != nil { fmt.Println(err.Error()) } else { params := map[string]interface{}{} err := json.NewDecoder(strings.NewReader(string(result[1]))).Decode(\u0026amp;params) if err != nil { fmt.Println(err.Error()) } else { paymentId, err := savePayment(params) if err != nil { fmt.Println(err.Error()) } else { fmt.Println(\u0026#34;Payment # \u0026#34; + strconv.FormatInt(paymentId, 10) + \u0026#34; processed successfully.\\r\\n\u0026#34;) } } } } } func savePayment(params map[string]interface{}) (int64, error) { db, err := sql.Open(\u0026#34;mysql\u0026#34;, \u0026#34;root:custompwd@tcp(127.0.0.1:6033)/web_payments\u0026#34;) if err != nil { return 0, err } log.Println(\u0026#34;successfully connect to db\u0026#34;) defer db.Close() queryString := `insert into payments ( payment_date, first_name, last_name, payment_mode, payment_ref_no, amount ) values ( ?, ?, ?, ?, ?, ? )` stmt, err := db.Prepare(queryString) if err != nil { return 0, err } defer stmt.Close() paymentDate := time.Now().Format(\u0026#34;2006-01-02 15:04:05\u0026#34;) firstName := params[\u0026#34;first_name\u0026#34;] lastName := params[\u0026#34;last_name\u0026#34;] paymentMode := params[\u0026#34;payment_mode\u0026#34;] paymentRefNo := params[\u0026#34;payment_ref_no\u0026#34;] amount := params[\u0026#34;amount\u0026#34;] res, err := stmt.Exec(paymentDate, firstName, lastName, paymentMode, paymentRefNo, amount) if err != nil { return 0, err } paymentId, err := res.LastInsertId() if err != nil { return 0, err } return paymentId, nil } Run Apps Open three terminals then run the worker, queue, and client\nChecking Database Now close the worker first, then follow with other services. Once the worker closed, the client still can send request to queue but the request stuck on the Redis.\nCheck Redis To check data stucked in Redis, we can use Redis GUI. AnotherRedisDesktopManager is one of my favourite.\nTo check number of data stored on list, use LLEN payments in redis-cli\nTo clear all data in cache use FLUSHALL or FLUSHDB in redis-cli\nCheck MySQL To check data that already written in SQL, follow this command line\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ~ 👉 docker exec -it mysqldb /bin/sh sh-4.2# mysql -u root -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 4763 Type \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement. mysql\u0026gt; SHOW databases; +--------------------+ | Database | +--------------------+ | information_schema | | appdb | | mysql | | performance_schema | | sys | | web_payments | +--------------------+ 6 rows in set (0.04 sec) mysql\u0026gt; USE web_payments; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u0026gt; SELECT * FROM payments; Then you\u0026rsquo;ll see tons of rows of request already recorded. If you wanna see only number of rows run SELECT COUNT(*) FROM payments;. If you want to clean up all the records, just run DELETE FROM payments;\nNext Question This simple service is good for learning purpose but still not enough to use in production. In the nest article, we\u0026rsquo;ll create five instances and Go apps with concurency feature.\nReferences:\nCoding Notes by aysf ","date":"2022-07-03T00:00:00Z","image":"https://ayw.codeberg.page/p/mq-snippet-go/thumb-mq_hu354b3efd1a4b1c172789528fa2f55495_13607_120x120_fill_q75_box_smart1.jpeg","permalink":"https://ayw.codeberg.page/p/mq-snippet-go/","title":"Message Queue with Golang"},{"content":"Motivation Recently, I maintain services that use Redis frequently for caching. It is very interesting since the services handle millions of messages a day. Before using Redis on the application, it is good to know what Redis is and how to use it.\nInstallation Basically, I have written how to install Redis using docker in this article. Now, I\u0026rsquo;ll explain more detail how to install the Redis with its configuration from official docker image (https://hub.docker.com/_/redis).\nBasic Container Redis can be installed in various ways. But docker is my preferred one.\n1 docker run --name redis-container-name -p 6379:6379 -d redis This command will do the following:\nPull the latest image from the docker hub Create and run the container and name it: my-redis Route port 6379 on my laptop to port 6379 inside the container. 6379 is Redis default port and can be changed source: Medium\nTo enter terminal on Redis container, use\n1 docker exec -it redis-container-name /bin/bash And use redis-cli -h localhost to use command line interface. Run redis-cli --help to see what kind of command that you can use.\nWith Volume 1 docker run --name redis_container -v /path/to/local/data:/usr/local/etc/redis -p 6379:6379 -d redis This command will do the same as previous but it mount local folder in /path/to/local/data to container folder /usr/local/etc/redis. Volume can be used to mount Redis configuration file. The configuration file by default can be accessed in this github link (https://github.com/redis/redis/blob/6.0/redis.conf). From the link, you can switch any version of Redis that you want to use.\n1 docker run -v /myredis/conf:/usr/local/etc/redis --name redis-container redis redis-server /usr/local/etc/redis/redis.conf Config Example In this section, I put some examples taken from PZN channel on YouTube. To follow these sections you need to clone my github repository containing docker-compose of Redis example:\n1 git clone https://github.com/aysf/example.git $HOME/docker/example I put the example on my preferred folder ~/docker/example but you can put anywhere you like.\nNote: everytime you run up a redis container with config, please make sure that config installed properly by command docker logs redis-container-name. If it\u0026rsquo;s installed correctly, there will be a Redis logo on your terminal screen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 1:C 16 Jul 2022 03:50:12.515 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo 1:C 16 Jul 2022 03:50:12.516 # Redis version=6.2.7, bits=64, commit=00000000, modified=0, pid=1, just started 1:C 16 Jul 2022 03:50:12.516 # Configuration loaded 1:M 16 Jul 2022 03:50:12.517 * monotonic clock: POSIX clock_gettime 1:M 16 Jul 2022 03:50:12.518 # A key \u0026#39;__redis__compare_helper\u0026#39; was added to Lua globals which is not on the globals allow list nor listed on the deny list. _._ _.-``__ \u0026#39;\u0026#39;-._ _.-`` `. `_. \u0026#39;\u0026#39;-._ Redis 6.2.7 (00000000/0) 64 bit .-`` .-```. ```\\/ _.,_ \u0026#39;\u0026#39;-._ ( \u0026#39; , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|\u0026#39;` _.-\u0026#39;| Port: 6379 | `-._ `._ / _.-\u0026#39; | PID: 1 `-._ `-._ `-./ _.-\u0026#39; _.-\u0026#39; |`-._`-._ `-.__.-\u0026#39; _.-\u0026#39;_.-\u0026#39;| | `-._`-._ _.-\u0026#39;_.-\u0026#39; | https://redis.io `-._ `-._`-.__.-\u0026#39;_.-\u0026#39; _.-\u0026#39; |`-._`-._ `-.__.-\u0026#39; _.-\u0026#39;_.-\u0026#39;| | `-._`-._ _.-\u0026#39;_.-\u0026#39; | `-._ `-._`-.__.-\u0026#39;_.-\u0026#39; _.-\u0026#39; `-._ `-.__.-\u0026#39; _.-\u0026#39; `-._ _.-\u0026#39; `-.__.-\u0026#39; 1:M 16 Jul 2022 03:50:12.518 # Server initialized 1:M 16 Jul 2022 03:50:12.519 * Ready to accept connections With Command We will use Redis feature called pipeline to run command from the terminal Linux/Unix. To start, run the cloned docker compose example.\n1 docker-compose -f $HOME/docker/example/redis/redis-with-command/docker-compose.yaml up -d The docker-compose.yaml looks like\n1 2 3 4 5 6 7 8 9 10 11 12 version: \u0026#39;3.5\u0026#39; services: redis: container_name: redis-with-command image: redis:6 command: redis-server /usr/local/etc/redis/redis.conf ports: - 6379:6379 volumes: - ./config/redis.conf:/usr/local/etc/redis/redis.conf - ./command:/usr/local/etc/command This docker-compose.yaml create container with two volumes, for config file and command file. Enter to the container terminal docker exec -it redis-with-command /bin/bash and run\n1 cat /usr/local/etc/command/sets.txt | redis-cli -h localhost --pipe With Security We will enable security, therefore client we\u0026rsquo;ll require to provide username and password to access the database.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 version: \u0026#39;3.5\u0026#39; services: redis: container_name: redis-with-security image: redis:6 command: redis-server /usr/local/etc/redis/redis.conf ports: - 6379:6379 volumes: - ./config/redis.conf:/usr/local/etc/redis/redis.conf redis-client: container_name: redis-client image: redis:6 This docker-compose create two container in order to simulate client that would access to server with security. Let\u0026rsquo;s run the yaml file\n1 docker-compose -f $HOME/docker/example/redis/redis-with-security/docker-compose.yaml up -d Now, Enter to Redis server and try to ping from redis-cli\n1 2 3 4 5 % docker exec -ti redis-with-security /bin/bash root@90d37981271e:/data# redis-cli 127.0.0.1:6379\u0026gt; ping PONG 127.0.0.1:6379\u0026gt; See that you can ping redis from it\u0026rsquo;s own machine.\nNext, use the client container to login..\n1 % docker exec -it redis-client /bin/bash and enter redis-cli server from client using command redis-cli -h redis-with-security. Then, you\u0026rsquo;ll get a rejection !\n1 Could not connect to Redis at redis-with-security:6379: Connection refused To solve this problem, commented out this line (line number 5) on the config file\n1 2 3 4 5 6 ... # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES # JUST COMMENT THE FOLLOWING LINE. # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # bind 127.0.0.1 ... Then reset these redis containers by docker-compose down and docker-compose up -d. Again, enter to the terminal of client container and run redis-cli -h redis-with-security. You shall be succed enter the redis-cli but you still get an error once you try to ping from the cli.\nAs you see on the error message, you need to set protected-mode no so you can do ping command from cli.\nWith Authentication Disabling protected-mode is not recomended when you build real apps. We should use authentication instead. Put this setting on redis.conf file.\n1 2 3 4 5 6 7 8 9 ... # Basically ACL rules are processed left-to-right. # # For more information about ACL configuration please refer to # the Redis web site at https://redis.io/topics/acl user default on +@connection user foo on +@all ~* \u0026gt;yourcustompassword ... Then run docker-compose -f $HOME/Docker/example/redis/redis-with-acl/docker-compose.yaml up -d. The default user setting above should be added to because, at first time on cli mode, the \u0026lsquo;default\u0026rsquo; user need to have authorization for connection.\nTry again enter cli mode, put username and password authentication\u0026hellip; and do ping!\n1 2 3 4 5 6 root@aaf906b99c21:/data# redis-cli -h redis-with-acl redis-with-acl:6379\u0026gt; auth foo yourcustompassword OK redis-with-acl:6379\u0026gt; ping PONG redis-with-acl:6379\u0026gt; And tada\u0026hellip; we can \u0026lsquo;ping\u0026rsquo; without disabliing \u0026lsquo;protected-mode\u0026rsquo;. You can ensure it by using command config get \u0026lt;pattern\u0026gt;\n1 2 3 redis-with-acl:6379\u0026gt; config get \u0026#39;protected-mode\u0026#39; 1) \u0026#34;protected-mode\u0026#34; 2) \u0026#34;yes\u0026#34; Redis GUI These are some free Redis GUIs that you can try (stats updated 15 July 2022):\nAnotherRedisDesktopManager: Star 21.6k RedisDesktopManager: Star 20.5k redis-commander: Star 3k QuickRedis: Star 1.3k P3X Redis UI: Star 522 redis-gui: Star 338 Redis Data Type Basic There are three types of Redis data type\nStrings Lists Hash Strings Strings are the most basic kind of Redis value. Redis strings are binary safe, this means that a Redis string can contain any kind of data, for instance a JPEG image or a serialized Ruby object. A string value can be at max 512 Megabytes in length (https://redis.io/docs/manual/data-types/#strings).\nThe strings command can be found here, https://redis.io/commands/?group=string. These are some method on strings:\nThe commond method for caching are GET, MGET, SET, MSET. It is possible to cache text or binary data in Redis, which could be anything from HTML pages and API responses to images and videos. for cache with automation expiration: SETEX, EXPIRE, EXPIREAT. This is very useful when database queries take a long time to run and can be cached for a given period time. Consequently, this avoids running those queries too frequently. for counting: INCR and INCRBY. Good examples of counters are page views, video views and like. Lists Redis Lists are simply lists of strings, sorted by insertion order. It is possible to add elements to a Redis List pushing new elements on the head (on the left) or on the tail (on the right) of the list (https://redis.io/docs/manual/data-types/#lists).\nHashes Redis Hashes are maps between string fields and string values, so they are the perfect data type to represent objects (e.g. A user with a number of fields like name, surname, age, and so forth)\nAdvance Sets Sorted Sets Bitmaps HyperLogLogs Sets Redis sets an unordered collection of Strings. It is possible to add, remove, and test for existence of members in O(1)\nSorted Sets Time Series Commands Pub/Sub Transaction Scripting Miscellaneous Commands References:\nCoding Notes by aysf ","date":"2022-07-02T00:00:00Z","image":"https://upload.wikimedia.org/wikipedia/en/6/6b/Redis_Logo.svg","permalink":"https://ayw.codeberg.page/p/redis-cheatsheet/","title":"Redis Cheatsheet"},{"content":"Installation There are several ways how to install Postgresql in Windows/Mac/Linux\nUsing Packages and Installers You can find out this installation or package from official Postgresql website here.\nUsing Docker or Container Postgresql have official Docker image hosted in Docker Hub.\nPostgreSQL Native Data Types from the most common:\nNumber integer with range -/+2 bilion, smallint bigint numeric or decimal (eg. 123.45 would require a numeric(5,2)) real and double precision is for floating values or data science application Character char(n) the characters should fit n number varchar(n) with length max n text is for blog post or article Date/Time date stores dates between 4713 BC and 5874897 AD time will store time of day accurate to 1 microsecond timestamp to record both time and date in one column timestamp with time zone Monetary Binary Boolean Geometric etc\u0026hellip; PSQL Commands psql is a terminal-based front-end to PostgreSQL.\nMost used commands command description psql -d database -U user -W connects to database under a specific user \\l list available databases \\dt list available tables \\d table_name describe a table \\dn list all schemes of the currently connected db \\df list available functions in the current db \\dv list available view \\du list all users and their assign role \\g execute the last command again \\? know all available psql commands \\h get help \\H switch the output to the HTML format \\q exit psql shell \\c db_name switch database Restore dump file 1 psql dbname \u0026lt; dumpfile SQL Syntax Create Database First, check in into database\n1 psql -d root If you don\u0026rsquo;t have root database, you can use another database, psql -d another-db. Then you can create database with syntax\n1 CREATE DATABASE new_db; Alternatively, you can create database directly from terminal, without connect to any database, with command:\n1 psql -U root \u0026#34;CREATE DATABASE newest_db\u0026#34; But ensure you have already user and database called \u0026lsquo;root\u0026rsquo;. That\u0026rsquo;s why I mentioned it in this article, Docker Cheatsheet.\nCreate role with option CREATE ROLE \u0026lt;role_name\u0026gt; [option]\nlist of option: https://www.postgresql.org/docs/current/sql-createrole.html\nsample options:\nSUPERUSER LOGIN For instance, you would like to create role called postgre\n1 CREATE ROLE postgre SUPERUSER LOGIN; Drop role DROP ROLE \u0026lt;role_name\u0026gt;\nReferences:\nCoding Notes by aysf ","date":"2022-07-01T00:00:00Z","image":"https://blog.payara.fish/hubfs/postgresql-logo.png","permalink":"https://ayw.codeberg.page/p/postgresql-cheatsheet/","title":"PostgreSQL Cheatsheet"},{"content":"All standard library of Golang can be accessed here pkg.go.dev/std.\nos Package os provides a platform-independent interface to operating system functinality.\nos.Executable() Returns the path name for the executable that started the current process. Put this lines into file tryme.go\n1 2 3 4 5 ... func main() { exec, _ := os.Executable() fmt.Println(exec) } And run go build . in the file dir. Then exec the output file ./tryme and you will see the terminal show your current file path like path/to/tryme\nio Package io provides basic interfaces to I/O primitives\nnet Package net provides a portable interface for network I/O, including TCP/IP, UDP, domain name, resolution, and Unix domain sockets.\nstrings Package strings implements simple function to manipulate UTF-8 encoded strings\nReferences:\nCoding Notes by aysf ","date":"2022-05-07T00:00:00Z","image":"https://upload.wikimedia.org/wikipedia/commons/6/62/Ruby_On_Rails_Logo.svg","permalink":"https://ayw.codeberg.page/p/go-std-lib/","title":"Go Std Library"},{"content":"What are the visible elements of a mobile network such a 4G network? Are there other elements that I don\u0026rsquo;t see? These are the questions we will answer in this article\nWe know the first element, well, because we carry it with us - it\u0026rsquo;s the terminal: the cell phone or smartphone. This terminal is called a UE for User Equipment in the LTE standard. Within the framework of this writing, a terminal can be referred to either as a UE, a terminal or a cell phone.\nTo work, it must be equipped with a SIM card inserted into it. The SIM, or Subscriber Identity Module, contains the subscriber identity unique throughout the world. It is also contains data about the subscription. In France, the SIM card is property of the operator. This card is called a USIM or Universal Subscriber Identity Module in 3G or 4G.\nHowever, in this writing, we use the acronym SIM because it is simpler and often used indifferently for 2G, 3G and 4G. The SIM card is found in equipment such as a smartphone but can also be found in a 4G key or a router, that I can connect to my laptop.\nIn this article, I am not going to differentiate between types of terminals. All terminals will be treated identically. Obviously, the network is not limited to that. If we walk in the street, we see antennas on the rooves of buildings or towers.\n","date":"2022-05-06T00:00:00Z","image":"https://upload.wikimedia.org/wikipedia/commons/8/82/Manzbau_Betonmischer_Mobilfunk-Antennen.jpg","permalink":"https://ayw.codeberg.page/p/4g-1-architecture-1/","title":"4G Network: Visible Devices and Nodes (SIM, UE, eNodeB)"},{"content":"Sass is a scripting language that allows you to write CSS in a more convinient and efficient way. There are two ways to write Sass, SASS syntax and SCSS syntax. At Progate, we use the SCSS syntax, which is the more common syntax. Note that the file extension is .scss rather than .css.\nMerits of Sass:\nLess writing than CSS Allows you to re-use code Nesting First, let\u0026rsquo;s look at the nesting structure of HTML \u0026amp; CSS below.\n1 2 3 4 5 \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; .. \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; the CSS would be\n1 2 3 4 5 6 7 8 9 .header { width: 100%; } .header ul { padding: 10px; } .header ul li { font-size: 15px; } look that you have to write .header three times.\nIn this way, Sass allows you to nest selectors in other selectors.\n1 2 3 4 5 6 7 8 9 .header { width: 100%; ul { padding: 10px; li { font-size: 15px; } } } The larger a site becomes, the more useful nesting becomes. It\u0026rsquo;s especially useful when making changes to class names. If you wanted to change the class name of the header above, you would need to make changes in 3 places with normal CSS, but with Sass you only need to make one change.\nReferences:\nCoding Notes by aysf https://aloucaslabs.com ","date":"2022-05-06T00:00:00Z","image":"https://ayw.codeberg.page/p/sass/sass_hu210300d2d10c388092fadd2e87fa3343_86845_120x120_fill_box_smart1_3.png","permalink":"https://ayw.codeberg.page/p/sass/","title":"Learn SASS"},{"content":"Installation First thing first, install Ruby in your machine (see Ruby Cheatsheet). And check whether there is any rails installation already exist by running this\n1 gem search \u0026#39;^rails$\u0026#39; --local If rails doesn\u0026rsquo;t exist, install rails by using\n1 gem install rails -v \u0026#39;6.1.6\u0026#39; -V --no-document You can install another rails version available on remote server. Check the other versions with\n1 gem search \u0026#39;^rails$\u0026#39; --all Projects To generate new project we can use this command\n1 rails new appname Rails generate new app with sqlite as default database. If we want to have project with postgresql database, use rails new appname -d postgresql or rails new appname -d mysql. These are requiered Gem pg or mysql2 for mysql database.\nYou also can generate specific rails version that have already installed before\n1 rails _5.2.4.1_ new app_name Here I write some sample project apps to make us familiar with the syntax\nTODOO Application Generate Scaffolding Here we\u0026rsquo;ll learn about how to generate simple CRUD application using rails g, using console rails c, create and migrate database using rails db:create and rails db:migrate and play with simple route and form validation.\nGenerate new project rails new todoo Move to the project folder cd todoo and run local server rails s. Check the web browser http://localhost:3000/ and you must see rails-welcome screen. If you get an error, it might be database error. Let\u0026rsquo;s create database in the next step. If you have not yet created the project database, you can create using rails command rails db:create Generate your first resource called todo rails g scaffold Todo title task:text Migrate the resources to your database table using rails db:migrate You also can rollback your migration by using rails db:rollback. Don\u0026rsquo;t forget to migrate again. Rails automatically creates routing for \u0026lsquo;Todo\u0026rsquo; resource. To see what routes available run rails routes Routing investigation also can be done by console. Run rails c and type Rails.application.routes.recognize_path(\u0026quot;/todos\u0026quot;) then you will get this 1 2 irb(main):001:0\u0026gt; Rails.application.routes.recognize_path(\u0026#34;/todos\u0026#34;) =\u0026gt; {:controller=\u0026gt;\u0026#34;todos\u0026#34;, :action=\u0026gt;\u0026#34;index\u0026#34;} The result above means that path /todos are handled by TodosController in file app/controllers/todos_controller.rb with index action. In the file you can see there are seven action available, i.e. index, show, new, edit, create, update, and destroy Still in the console, you also can check home route by using Rails.application.routes.recognize_path(\u0026quot;/\u0026quot;) Now try to edit file \u0026lsquo;config/routes.rb\u0026rsquo;, we add a line to handle homepage with \u0026rsquo;todos#index\u0026rsquo; controller 1 2 3 4 5 Rails.application.routes.draw do root to: \u0026#34;todos#index\u0026#34; resources :todos # For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html end Try to re-run again, open web browser and access http://localhost:3000/. Now instead you have rails welcome screen, you get index todo page. Play around with simple todo app from web browser. Try add some data. From console rails c, you can also view the record using command Todo.all for all record, Todo.first for first record, or for more specific result, use Todo.last.task for the task field in the last record. You also can create new record from console. i.e. Todo.create(title:\u0026quot;Elixir\u0026quot;,task:\u0026quot;Learn Elixir...\u0026quot;) or update the existing record, i.e. Todo.first.update(title:\u0026quot;Clean\u0026quot;) How if there is anyone put title only without provide task input. Is it still valid?. Then you can check it from the console. Initialize c variable c = Todo.new(title:\u0026quot;c\u0026quot;) then run c.valid?. Then it should print true To avoid the problem, we should put validation in app/models/todo.rb 1 2 3 4 class Todo \u0026lt; ApplicationRecord validates :title, presence: true validates :task, presence: true end Reload the console using reload! and try again as step 16 state. Now you should get false Layout Adding Bootstrap into the Gemfile 1 2 3 4 gem \u0026#39;bootstrap\u0026#39;, \u0026#39;~\u0026gt; 5.1.3\u0026#39; gem \u0026#39;bootstrap-icons\u0026#39;, \u0026#39;~\u0026gt; 1.0\u0026#39;, \u0026#39;\u0026gt;= 1.0.12\u0026#39; gem \u0026#39;bootstrap-icons-helper\u0026#39; ... Running bundle install to download the new dependencies bundle install Rename app/assets/stylesheets/application.css to app/assets/stylesheets/application.scss Then add the lines in the file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 @import \u0026#34;bootstrap\u0026#34;; main.container { width: auto; max-width: 680px; padding: 0 15px; padding-bottom: 60px; } footer { position: fixed; bottom: 0; width: 100%; height: 60px; line-height: 60px; background-color: #f5f5f5; text-align: center; } .media p { font-size: 16px; } a:hover { background: #f5f5f5; } In app/views/layouts/application.html.erb add these lines to create footer and wrap yield which will render a specific view template. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; ... \u0026lt;body\u0026gt; \u0026lt;main role=\u0026#34;main\u0026#34; class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer class=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;text-muted\u0026#34;\u0026gt; Todoo by Ananto \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Put our own style to file app/views/todos/index.html.erb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;p id=\u0026#34;notice\u0026#34;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;% @todos.each do |todo| %\u0026gt; \u0026lt;div class=\u0026#34;d-flex\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-shrink-0\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;\u0026lt;%= gravatarized_url(todo.title) %\u0026gt;\u0026#34; class=\u0026#34;align-self-start mr-3\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-grow-1 ms-3\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;\u0026lt;%= todo.title %\u0026gt;\u0026lt;/h5\u0026gt; \u0026lt;%= todo.task %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-shrink-0\u0026#34;\u0026gt; \u0026lt;span\u0026gt; \u0026lt;%= link_to todo, class: \u0026#39;btn btn-primary btn-sm\u0026#39; do %\u0026gt; \u0026lt;%= bootstrap_icon \u0026#34;eye\u0026#34;, width: 16, height: 16, fill: \u0026#34;white\u0026#34; %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span\u0026gt; \u0026lt;%= link_to edit_todo_path(todo), class: \u0026#39;btn btn-primary btn-sm\u0026#39; do %\u0026gt; \u0026lt;%= bootstrap_icon \u0026#34;pencil-square\u0026#34;, width: 16, height: 16, fill: \u0026#34;white\u0026#34; %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span\u0026gt; \u0026lt;%= link_to todo, method: :delete, data: { confirm: \u0026#39;Are you sure?\u0026#39; }, class: \u0026#39;btn btn-primary btn-sm\u0026#39; do %\u0026gt; \u0026lt;%= bootstrap_icon \u0026#34;trash\u0026#34;, width: 16, height: 16, fill: \u0026#34;white\u0026#34; %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= link_to \u0026#39;New Todo\u0026#39;, new_todo_path %\u0026gt; Define gravatarized_url inside TodosHelper in file app/helpers/todos_helper.rb 1 2 3 4 5 6 module TodosHelper def gravatarized_url(title) hash = Digest::MD5.hexdigest(title) \u0026#34;https://www.gravatar.com/avatar/#{hash}?d=wavatar\u0026#34; end end Check your page now. It\u0026rsquo;s cool. But for better user experience, let\u0026rsquo;s render the form on the index page. Add the following code into todo/index.html.erb 1 2 3 4 5 6 7 8 \u0026lt;p id=\u0026#34;notice\u0026#34;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;%= render(\u0026#34;form\u0026#34;, todo: Todo.new) %\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;% @todos.each do |todo| %\u0026gt; \u0026lt;div class=\u0026#34;d-flex\u0026#34;\u0026gt; ... Replace the content of todos/_form.html.erb with the following codes: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt; \u0026lt;h5 class=\u0026#34;card-title\u0026#34;\u0026gt;Create A Task!\u0026lt;/h5\u0026gt; \u0026lt;%= form_with(model: todo) do |form| %\u0026gt; \u0026lt;% if todo.errors.any? %\u0026gt; \u0026lt;div id=\u0026#34;error_explanation\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= pluralize(todo.errors.count, \u0026#34;error\u0026#34;) %\u0026gt; prohibited this todo from being saved:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;% todo.errors.each do |error| %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= error.full_message %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;div class=\u0026#34;form-group mb-3\u0026#34;\u0026gt; \u0026lt;%= form.text_field :title, placeholder: \u0026#34;Title\u0026#34;, class: \u0026#34;form-control\u0026#34; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group mb-3\u0026#34;\u0026gt; \u0026lt;%= form.text_area :task, placeholder: \u0026#34;Task\u0026#34;, class: \u0026#34;form-control\u0026#34; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;actions\u0026#34;\u0026gt; \u0026lt;%= form.submit \u0026#34;Add!\u0026#34;, class: \u0026#34;btn btn-outline-primary w-100\u0026#34; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; We also want to improve user experience after he add task. Instead redirect to other page, we want to user stay on the index page and see the task he recently added on the top list. edit TodosController#create 1 2 3 4 5 6 def create @todo = Todo.new(todo_params) respond_to do |format| if @todo.save format.html { redirect_to root_path, notice: \u0026#34;Todo was successfully created.\u0026#34; } also change TodosController#index\n1 2 3 def index @todos = Todo.all.order(created_at: :desc) end Ta Da.. Here the final view of our Todoo application Another Application References:\nCoding Notes by aysf ","date":"2022-05-06T00:00:00Z","image":"https://upload.wikimedia.org/wikipedia/commons/6/62/Ruby_On_Rails_Logo.svg","permalink":"https://ayw.codeberg.page/p/rails-cheatsheet/","title":"Rails Cheatsheet"},{"content":"Installation I prefer to use version management to install various version of Ruby so that I can follow any tutorial that I found anywhere.\nVia Homebrew For macOS run this command:\n1 brew install rbenv ruby-build Via Git For Debian, Ubuntu, and their derivatives\nClone rbenv into \u0026lsquo;~/.rbenv\u0026rsquo; by running git clone https://github.com/rbenv/rbenv.git ~/.rbenv Add this lines into ~/.bashrc 1 2 export PATH=\u0026#34;$HOME/.rbenv/bin:$PATH\u0026#34; eval \u0026#34;$(rbenv init -)\u0026#34; Set up rbenv in your shell ~/.rbenv/bin/rbenv init and follow the printed instruction Restart your shell so that PATH changes take effect. Or run source ~/.bashrc Verify installation using rbenv-doctor: ~/.rbenv/bin/rbenv init the result shall be 1 2 3 4 5 6 7 8 Checking for `rbenv\u0026#39; in PATH: /usr/local/bin/rbenv Checking for rbenv shims in PATH: OK Checking `rbenv install\u0026#39; support: /usr/local/bin/rbenv-install (ruby-build 20170523) Counting installed Ruby versions: none There aren\u0026#39;t any Ruby versions installed under `~/.rbenv/versions\u0026#39;. You can install Ruby versions like so: rbenv install 2.2.4 Checking RubyGems settings: OK Auditing installed plugins: OK Install rbenv-build (optional) Using rbenv-installer rbenv-installer via script 1 2 3 4 5 # with curl curl -fsSL https://github.com/rbenv/rbenv-installer/raw/HEAD/bin/rbenv-installer | bash # alternatively, with wget wget -q https://github.com/rbenv/rbenv-installer/raw/HEAD/bin/rbenv-installer -O- | bash verify installation 1 2 3 4 5 # with curl curl -fsSL https://github.com/rbenv/rbenv-installer/raw/HEAD/bin/rbenv-doctor | bash # alternatively, with wget wget -q https://github.com/rbenv/rbenv-installer/raw/HEAD/bin/rbenv-doctor -O- | bash Using rbenv All guidence for using rbenv can be found in this help command rbenv -h\n1 2 3 4 5 6 7 8 9 10 11 12 Some useful rbenv commands are: commands List all available rbenv commands local Set or show the local application-specific Ruby version global Set or show the global Ruby version shell Set or show the shell-specific Ruby version install Install a Ruby version using ruby-build uninstall Uninstall a specific Ruby version rehash Rehash rbenv shims (run this after installing executables) version Show the current Ruby version and its origin versions List installed Ruby versions which Display the full path to an executable whence List all Ruby versions that contain the given executable Using Gem Gem is package management in Ruby. Some guidance for Gem also can be found in gem -h. To install specific version of gem, you can follow this flow, the example of rails insstallation\nInstall Rails Using Gem, you can install Rails, the most popular web framework in Ruby!\nChecking rails in local gem list rails --local If you do not find the desired version on local, you can install using command like gem install rails -v '5.2.3' -V --no-document. Not sure if the version is exist, check use gem search '^rails$' --all You also can check other installed gems gem list --local Generate new project with specific Rails version, for instance rails _6.1.4.1_ new appname Go to appname directory and check Rails version rails -v To run Rails server locally, use rails s Comparison to Golang As Ruby is my second language, it is easier for me to learn Ruby by comparing this syntax with language that I am familiar with :)\nRuby Golang Gemfile.lock go.sum Gemfile go.mod bundle i go mod tidy rails new app_name go mod init project_name References:\nCoding Notes by aysf https://aloucaslabs.com ","date":"2022-05-06T00:00:00Z","image":"https://ayw.codeberg.page/p/ruby-installation/ruby_hu169ad9fa26116558547dfb60c1b64219_42863_120x120_fill_q75_box_smart1.jpeg","permalink":"https://ayw.codeberg.page/p/ruby-installation/","title":"Ruby Installation"},{"content":"What are the visible elements of a mobile network such a 4G network? Are there other elements that I don\u0026rsquo;t see? These are the questions we will answer in this article\nDensification and Widebandwidth Are two approaches to commercialize 5G systems.\nUltra Dense Network (UDN) ","date":"2022-05-06T00:00:00Z","image":"https://upload.wikimedia.org/wikipedia/commons/8/82/Manzbau_Betonmischer_Mobilfunk-Antennen.jpg","permalink":"https://ayw.codeberg.page/p/wireless-communication-3/","title":"Wireless Communication #3: Principles of Wireless Resource Management"},{"content":"Ruby Courses 1. Ruby Installation 2. Ruby Operation 3. Object Oriented in Ruby 4. Ruby Metaprogramming 5. Blocks, Proc, and Lambda Ruby Study Cases 1. Twitor, a Twit on Rails 2. Build Blog in Ruby 3. Simple Menu Console App 4. Pokemon CSV Reader Ruby References 1. Ruby Documentation 2. Odin Project 3. TCP Server in Ruby ","date":"2022-02-07T00:00:00Z","image":"https://ayw.codeberg.page/images/ruby.png","permalink":"https://ayw.codeberg.page/p/ruby-tutorial/","title":"Ruby Tutorial"},{"content":"Prerequisition You have already installed rbenv and familiar with the command.\nThis project was made based on Progate\nGenerate New Project Create new folder like mkdir new_project and go inside cd new_project. Set local for ruby version 2.7 using rbenv local 2.7. Then generate new project by using command rails _7.0.3_ new kicau.\nGo to kicau dir, and run server using rails s\nPut this address http://localhost:3000/ on browser and you\u0026rsquo;ll see Rails welcoming screen if success.\nCreate Homepage Create the top page with rails generate controller home top.\nA new web page is automatically created by this command, and will allow you to access localhost:3000/home/top. Well, when you run the command, Rails generates all the necessary files for displaying page. To display a page in Rails, you need the three things shown below:\nView Controller Route Understanding View A view is an HTML file that\u0026rsquo;s used to create the look of a page. When the browser asks for a file, Rails returns a requested view to the browser to display a page. Views are located inside the views folder. The rails generate controller home top command generates the home folder and a file named top.html.erb in the views folder. erb is a unique file format, but you can think of it as a regular HTML file for now.\nBecause a view (HTML) contains the content displayed in the browser, you can change the content by editing the file. Let\u0026rsquo;s edit top.html.erb to make it look more like the Top page of TweetApp.\nIn the view for the Top Page (app/views/home/top.html.erb)\n1 2 3 4 5 6 \u0026lt;h2\u0026gt; Tweet to the world \u0026lt;br\u0026gt; connect to the world \u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Share your favourite momments!\u0026lt;/p\u0026gt; Open the browser and check localhost:3000/home/top !\nUnderstanding Controller When displaying a page, Rails returns views via its controllers. Let\u0026rsquo;s take a look inside a controller file. The rails g controller home top command creates creates a controller file named home_controller.rb with a top method. A method within a controller is also known as action.\nThe role of an action in a controller is to find a view from the views folder, then return it to the browser. The action looks for a folder with the same name as controller (Home), then finds a file with the same name as the action (top)\nUnderstanding Route While we return the view through the controller, the routing is the one reponsible for connecting the browser to the controller. Make sure to understand that the process for displaying a page is in the following order: routes -\u0026gt; controllers -\u0026gt; views.\nRoutes can be described with a routing table. A route points to a specific action of a controller according to the URL requested. When a URL is entered in the browser, it calls for a matching action in the controller based on the URL.\nRoutes are defined in the config/routes.rb file in the following syntax: get \u0026quot;URL\u0026quot; =\u0026gt; \u0026quot;controller#action. For instance, as shown in the image below, the URL \u0026ldquo;localhost:3000/home/top\u0026rdquo; points to the top action in the Home controller.\nWe can practice to change route of the Top page. Once you modify the route, you can access the Top page via localhost:3000/top by changing get \u0026quot;home/top\u0026quot; =\u0026gt; \u0026quot;home#top\u0026quot; to get \u0026quot;top\u0026quot; =\u0026gt; \u0026quot;home#top\u0026quot;.\nCreate About Page Let us create the about page. But now we can use again rails generate controller. The command we inputted when we created the Top page actually contains controller name and action name. The rails generate controller controller_name action_name command generates a controller and the files associated with it. However, you can\u0026rsquo;t use this command when a controller with the same name exists.\nTo add about page, we do manually.\nIn Routes file, routes.rb, Add get \u0026quot;about\u0026quot; =\u0026gt; \u0026quot;home#about\u0026quot; In home_controller.rb file, inside class HomeController, add action for about and left it empty. In the app/views/home/, add file called about.html.erb, and put some words in html format. Create Posts Let\u0026rsquo;s create an index action for the Posts page. Since the Posts controller doesn\u0026rsquo;t exists yet, we can use the command like rails g controller posts index. We\u0026rsquo;re going to write the HTML for the Posts page in views/posts/index.html.erb. First, let\u0026rsquo;s copy \u0026amp; paste the provided code to quickly create a page.\nFeature These are four common features of post:\nView all posts -\u0026gt; use action posts#index to view all posts Show detail post -\u0026gt; use action posts#showto view detail post Create post -\u0026gt; use action posts#new and posts#create to view create new post form and sending the form data. Edit post -\u0026gt; use action posts#edit and posts#update to view edit form and sending the updated form data. Delete post -\u0026gt; use action posts#destroy to delete post record Preparing a Database A database consists of tables. Each table has rows and columns. In the posts table shown below, each row also known as a record, represents a post while each column represents a specific type of data.\nTo store data in a database, we need to create a table like the one in the last slide. Let us create the posts table for storing posts. There are two steps we must follow, i.e.\nCreate a file that directs the changes to the database Apply the changes in the database Create a Migration File We need to create a migration file to make changes to the database. With the rails g model Post content:text command, you can create a migration file which adds the posts table with the content column. The text describe the type of data that will be stored in the column.\nLook again rails g model .. command. The Post in the command represent a model name. With this command, the following files are generated:\na file in app/models where a model is defined a migration file in db/migrate Create a Table In this step, we will apply the changes to the database using the migration file we have created. To apply the changes in the database, simply execute the command rails db:migrate. By executing the command, it will create a table according to the code in the migration file.\nAdding Data to a Table Let\u0026rsquo;s create an instance of Post from the Post model (Post class) in the rails console. To create an instance, we\u0026rsquo;re going to use the new method. For example, you can create a Post instance with the content, \u0026ldquo;Hello World\u0026rdquo;, post = Post.new(content: \u0026quot;Hello World\u0026quot;).\nTo save a Post instance to the posts table, you need to run the save method, post.save. Because the Post model inherits from ApplicationRecord, it can use the methods defined in ApplicationRecord, like the save method.\nWe can get the first record in the posts table using post = Post.first. Then with post.content, we can get the content of the first post. To get all the data from the posts table, use post = Post.all which returns you all the data saved in the table in the form of an array. Then we can get an element using an index number like Post.all[0]. The data we get with Post.all[0] is the same as data you get with Post.first. So with Post.all[0].content, you can get the content of the first post.\nDisplaying Error Message Rails provides a special flash variable. By assigning a string to flash[:notice] in an action, you can use flash[:notice] in the views. Flashes are automatically removed after being displayed once. We\u0026rsquo;ll add flash[:notice] to application.html.erb because it\u0026rsquo;ll be used in many places.\nWe put these lines after closing tag \u0026lt;/header\u0026gt;\n1 2 3 4 5 \u0026lt;% if flash[:notice] %\u0026gt; \u0026lt;div class=\u0026#34;flash\u0026#34;\u0026gt; \u0026lt;%= flash[:notice] %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; Adding Routes By writing posts/:id with a colon : in the URL of the route, you can map URLs like /posts/1 and /posts/2 to the show action. This applies to every URL written as /posts/.... In routes.rb, write\n1 2 3 4 5 6 7 get \u0026#34;posts/index\u0026#34; =\u0026gt; \u0026#34;posts#index\u0026#34; get \u0026#34;posts/new\u0026#34; =\u0026gt; \u0026#34;posts#new\u0026#34; get \u0026#34;posts/:id\u0026#34; =\u0026gt; \u0026#34;posts#show\u0026#34; post \u0026#34;posts/create\u0026#34; =\u0026gt; \u0026#34;posts#create\u0026#34; get \u0026#34;posts/:id/edit\u0026#34; =\u0026gt; \u0026#34;posts#edit\u0026#34; post \u0026#34;posts/:id/update\u0026#34; =\u0026gt; \u0026#34;posts#update\u0026#34; post \u0026#34;posts/:id/destroy\u0026#34; =\u0026gt; \u0026#34;posts#destroy\u0026#34; It\u0026rsquo;s important that you need to write the route posts/:id below posts/index and posts/new. This is because the routing looks for URLs from the top. Writing it above posts/index or posts/new would cause the URL localhost:3000/posts/index or localhost:3000/posts/new to match the route posts/:id.\nGenerally, when you press the submit button, the post data will be sent to the server-side (Rails). Let\u0026rsquo;s prepare a create action to save the receive post data to the database. The URL of the create action should be /posts/create. We use post method on the create when receiving data from a form.\nSince the update action receives the value from the form, we also need to change the routing to post instead of get. It is also updates the post with a specific id, so make sure to include id in the URL.\nAdding Action Let\u0026rsquo;s adding some actions in the Post Controller. In the index action of the Post controller, We catch the data from the database using Post.all, then assign them to @posts variable. In posts/index.html.erb, we can use the each method to loop through the @posts array to print each post.\nIn the show action, the value of the :id is stored in a hash variable known as params. You can get that value using params[:id]. To display the post, we declare the variable @post in the show action and assign it the posts whose id is equal to params[:id] by retrieving them from the database. Then we\u0026rsquo;ll display the details of the @post in \u0026lsquo;show.html.erb`.\nSince new.html.erb will also be displayed via new action (localhost:3000/posts/new), an error will occur unless we also define the @post variable there. We can solve this by assigning Post.new (a blank post instance), to @post as code shown above.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class PostsController \u0026lt; ApplicationController def index @posts = Post.all.order(created_at: :desc) end def show @post = Post.find_by(id: params[:id]) end def new @post = Post.new end def create @post = Post.new(content: params[:content]) if @post.save flash[:notice] = \u0026#34;Post successfully created\u0026#34; redirect_to(\u0026#34;/posts/index\u0026#34;) else render(\u0026#34;posts/new\u0026#34;) end end def edit @post = Post.find_by(id: params[:id]) end def update @post = Post.find_by(id: params[:id]) @post.content = params[:content] if @post.save flash[:notice] = \u0026#34;Post successfully edited\u0026#34; redirect_to(\u0026#34;/posts/index\u0026#34;) else render(\u0026#34;posts/edit\u0026#34;) end end def destroy @post = Post.find_by(id: params[:id]) @post.destroy flash[:notice] = \u0026#34;Post successfully deleted\u0026#34; redirect_to(\u0026#34;/posts/index\u0026#34;) end end There are two problems for creating action:\nNo matching view for the create action. Can\u0026rsquo;t save any posts. For solving this problem, we can redirect to a different URL instead of adding a view. For our create action, let us redirect the request to the Posts page.\n1 2 3 4 5 6 7 class PostController \u0026lt; ApplicationController ... def create redirect_to(\u0026#34;/posts/index\u0026#34;) end ... end To solve second problem, we have go to two steps:\nSend post data to the create action Receive the sent data in create action and save it To send data to the create action, We need to specify the name attribute of the \u0026lt;textarea\u0026gt; tag. This way, the data in the \u0026lt;textarea\u0026gt; tag will be sent to the Rails side as a hash with the name attributes as the key.\nOnce you specify the name attributes of a form element, the action of the controller can receive the form data. Since the params variable is a hash with the name attibutes as the key, we can get content with params[:content].\nTo receive the sent data in the create action, we can create a @post with the data received from the form by using params[:content] as the argument.\n1 2 3 4 5 6 7 8 9 class PostController \u0026lt; ApplicationController ... def create @post = Post.new(content: params[:content]) @post.save redirect_to(\u0026#34;/posts/index\u0026#34;) end ... end We\u0026rsquo;ve used params when receiving input data and also to get the id value from the URL. Remember there are two ways of using params:\nGet the value from the URL of the route Get the form input data with the name attribute Adding Views In the views/posts folder, we need to create\nnew.html.erb is html page to display create-post form index.html.erb is to view all posts show.html.erb is to show detail post edit.html.erb is to display post-edit form New Post You can send the data entered in the form using the form_tag method. The destination URL is specified like: \u0026lt;%= form_tag(destination URL) do %\u0026gt;. This allows \u0026lt;input type=\u0026quot;submit\u0026quot; ...\u0026gt;, also known as the submit button in the form, when clicked, for the data to be sent to the specified URL.\nPut these lines to posts/new.html.erb,\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;div class=\u0026#34;main posts-new\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;form-heading\u0026#34;\u0026gt;Create a new post\u0026lt;/h1\u0026gt; \u0026lt;%= form_tag(\u0026#34;/posts/create\u0026#34;) do %\u0026gt; \u0026lt;div class=\u0026#34;form\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-body\u0026#34;\u0026gt; \u0026lt;% @post.errors.full_messages.each do |message| %\u0026gt; \u0026lt;div class=\u0026#34;form-error\u0026#34;\u0026gt; \u0026lt;%= message %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;textarea name=\u0026#34;content\u0026#34;\u0026gt;\u0026lt;%= @post.content %\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Post\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Displaying All Post In posts/index.html.erb, we can use the each method to loop through the @posts array to print each post.\n1 2 3 4 5 6 7 8 9 \u0026lt;div class=\u0026#34;main posts-index\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;% @posts.each do |post| %\u0026gt; \u0026lt;div class=\u0026#34;posts-index-item\u0026#34;\u0026gt; \u0026lt;%= link_to(post.content, \u0026#34;/posts/#{post.id}\u0026#34;) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Displaying Detail Post Then in the /posts/show.html.erb, put these\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;div class=\u0026#34;main posts-show\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;posts-show-item\u0026#34;\u0026gt; \u0026lt;p\u0026gt; \u0026lt;%= @post.content %\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;post-time\u0026#34;\u0026gt; \u0026lt;%= @post.created_at %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;post-menus\u0026#34;\u0026gt; \u0026lt;%= link_to(\u0026#34;Edit\u0026#34;, \u0026#34;/posts/#{@post.id}/edit\u0026#34;) %\u0026gt; \u0026lt;%= link_to(\u0026#34;Delete\u0026#34;, \u0026#34;/posts/#{@post.id}/destroy\u0026#34;, {method: \u0026#34;post\u0026#34;}) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; In \u0026rsquo;erb\u0026rsquo; (or Embedded Ruby) file format like \u0026lsquo;index.html.erb\u0026rsquo;, you can embed Ruby code in HTML using \u0026lt;% %\u0026gt; brackets. Let\u0026rsquo;s try to assign and display a variable called \u0026lsquo;post1\u0026rsquo;. Put this code in an \u0026lsquo;html.erb\u0026rsquo; file format.\n1 2 3 \u0026lt;% post1 = \u0026#34;Learning Rails\u0026#34; %\u0026gt; \u0026lt;%= post1 %\u0026gt; We\u0026rsquo;ve learned that we can \u0026lt;% %\u0026gt; and \u0026lt;%= %\u0026gt; to embed Ruby code. \u0026lt;% %\u0026gt; is used in cases like defining a variables as it won\u0026rsquo;t be displayed. \u0026lt;%= %\u0026gt; on the other hand, is used for cases like printing the content of a variable as it will be displayed.\nEdit Form We\u0026rsquo;ll able to edit and delete posts from the Post details page as shown in the left image. We\u0026rsquo;ll also create an Edit post page to edit posts as shown in the right image.\nLet\u0026rsquo;s add an Edit and Delete links in show.html.erb as shown below\n1 2 3 4 ... \u0026lt;%= link_to(\u0026#34;Edit\u0026#34;, \u0026#34;/posts/#{@post.id}/edit\u0026#34;) %\u0026gt; \u0026lt;%= link_to(\u0026#34;Delete\u0026#34;, \u0026#34;/posts/#{@post.id}/destroy\u0026#34;, {method: \u0026#34;post\u0026#34;}) %\u0026gt; ... You can send a post request with link_to method by adding {method: \u0026quot;post\u0026quot;} as the third argument.\nThe data of the form needs to be sent to the update action in order to be saved to database. Just like with the New post page, you can specify the destination using the form_tag method. In the posts/edit.html.erb, put these lines\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;div class=\u0026#34;main posts-new\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;form-heading\u0026#34;\u0026gt;Edit a post\u0026lt;/h1\u0026gt; \u0026lt;%= form_tag(\u0026#34;/posts/#{@post.id}/update\u0026#34;) do %\u0026gt; \u0026lt;div class=\u0026#34;form\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-body\u0026#34;\u0026gt; \u0026lt;!-- This code is to get the error messages and put them in variables with an each loop --\u0026gt; \u0026lt;% @post.errors.full_messages.each do |message| %\u0026gt; \u0026lt;div class=\u0026#34;form-error\u0026#34;\u0026gt; \u0026lt;%= message %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;textarea name=\u0026#34;content\u0026#34;\u0026gt;\u0026lt;%= @post.content %\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Save\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; where \u0026lt;%= @post.content %\u0026gt; in line 15 is the initial value.\nPost Validation Validation is set in the models/post.rb as shown in codes below.\n1 2 3 class Post \u0026lt; ApplicationRecord validates :column_name, {details of the validation} end You can use the validates method, and specify the column name and the details of the validation as arguments. By using {presence: true} as shown below.\n1 2 3 class Post \u0026lt; ApplicationRecord validates :content, {presence: true} end Validation can be used to check not only the existence of a value but the number of characters as well. As shown in the image, We can set the maximum number of characters using\n1 2 3 class Post \u0026lt; ApplicationRecord validates :content, {length: {maximum: 140}} end The list of validation rules, known as validators, is actually a hash. You can specify more than one by separating them with a comma , as shown below\n1 2 3 class Post \u0026lt; ApplicationRecord validates :content, {presence: true, length: {maximum: 140}} end ","date":"2022-02-07T00:00:00Z","image":"https://ayw.codeberg.page/p/twitor-1/ruby_hu169ad9fa26116558547dfb60c1b64219_42863_120x120_fill_q75_box_smart1.jpeg","permalink":"https://ayw.codeberg.page/p/twitor-1/","title":"Twitor #1: Create Post"},{"content":"This project made based on Progate\nCreate User The user features:\nShow list of users: handled by action users#index Show user details: handled by action users#show Sign up: handled by action users#new and users#create Edit account: handled by action users#edit and users#update Log in: handled by action users#login_form and users#login Log out: handled by action users#logout Create Model and Table We can create the User model and the users table with the command\n1 rails g model User name:string email:string We\u0026rsquo;ll add two pieces of data, name and email. The column_name: data_type can be used multiple times in a line to create multiple columns at the same time. string is used for short text line name and email\nAdding Column We will learn how to add column in existing table\nAdding image_name To add a column image_name, we need a migration file that can be generated by running rails g migration file_name. A migration file is created with a timestamp prepended to the file name. The file name can be anything, but it\u0026rsquo;s better to use a descriptive name, like add_image_name_to_users\nPrior to migrate, we need to write the change method.\n1 2 3 4 5 class AddImageNameToUsers \u0026lt; ActiveRecord::Migrate[5.0] def change add_column :users, :image_name, :string end end Adding Password Create migration file with the name add_password_to_users using rails g migration like code below\n1 rails g migration add_password_to_users Change the content of the migration file as shown below\n1 2 3 4 5 class AddPasswordToUsers \u0026lt; ActiveRecord::Migration[5.0] def change add_column :users, :password, :string end end and run rails db:migrate\nAdding Validation Let\u0026rsquo;s add a validation to check for a \u0026ldquo;duplicate email\u0026rdquo; so that new users can\u0026rsquo;t register with an email already stored in the database. You can validate the uniquiness with uniqueness: true. In models/user.rb, put\n1 2 3 4 5 class User \u0026lt; ApplicationRecord validates :name, {presence: true} validates :email, {presence: true, uniqueness: true} validates :password, {presence: true} end Adding Route In the config/routes.rb add these routes\n1 2 3 4 5 6 7 8 9 10 11 12 ... get \u0026#34;login\u0026#34; =\u0026gt; \u0026#34;users#login_form\u0026#34; post \u0026#34;login\u0026#34; =\u0026gt; \u0026#34;users#login\u0026#34; post \u0026#34;logout\u0026#34; =\u0026gt; \u0026#34;users#logout\u0026#34; post \u0026#34;users/:id/update\u0026#34; =\u0026gt; \u0026#34;users#update\u0026#34; get \u0026#34;users/:id/edit\u0026#34; =\u0026gt; \u0026#34;users#edit\u0026#34; post \u0026#34;users/create\u0026#34; =\u0026gt; \u0026#34;users#create\u0026#34; get \u0026#34;signup\u0026#34; =\u0026gt; \u0026#34;users#new\u0026#34; get \u0026#34;users/index\u0026#34; =\u0026gt; \u0026#34;users#index\u0026#34; get \u0026#34;users/:id\u0026#34; =\u0026gt; \u0026#34;users#show\u0026#34; ... It seems like the two routes with /login are the same, but get and post are treated as different routes. The link_to method looks for the get routing, while the form_tag method looks for the post routing.\nWe use post in logout because we need it to modify the value of the session variable.\nAdding Action The code in the ApplicationController can be used in all controllers. Like the codes below, if we define the :set_current_user method and set it as a before_action, @current_user will be define in all the actions of the controller\n1 2 3 4 5 6 7 8 class ApplicationController \u0026lt; ActionController::Base before_action :set_current_user def set_current_user @current_user = User.find_by(id: session[:user_id]) end end We create a method named authenticate_user in the Application controller to redirect users to the Login page. Also, We define a method named forbid_login_user in the Application controller. This method redirects the user to the Posts page if the user is loged in.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class ApplicationController \u0026lt; ActionController::Base before_action :set_current_user def set_current_user @current_user = User.find_by(id: session[:user_id]) end def authenticate_user if @current_user == nil flash[:notice] = \u0026#34;You must be logged in\u0026#34; redirect_to(\u0026#34;/login\u0026#34;) end end def forbid_login_user if @current_user flash[:notice] = \u0026#34;You are already logged in\u0026#34; redirect_to(\u0026#34;/posts/index\u0026#34;) end end end Using rails g controller command, create a new controller named users with the index action for the Users page.\nIn the user_controller.rb, define action index, show, new, create, edit, and update\nLet\u0026rsquo;s look at how to apply before_action to only certain actions of certain controllers because we don\u0026rsquo;t want to apply this to all the actions.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 class UsersController \u0026lt; ApplicationController before_action :authenticate_user, {only: [:index, :show, :edit, :update]} before_action :forbid_login_user, {only: [:new, :create, :login_form, :login]} # Set the ensure_correct_user method as a before_action before_action :ensure_correct_user, {only: [:edit, :update]} def index @users = User.all end def show @user = User.find_by(id: params[:id]) end def new @user = User.new end def create @user = User.new( name: params[:name], email: params[:email], image_name: \u0026#34;default_user.jpg\u0026#34;, password: params[:password] ) if @user.save session[:user_id] = @user.id flash[:notice] = \u0026#34;You have signed up successfully\u0026#34; redirect_to(\u0026#34;/users/#{@user.id}\u0026#34;) else render(\u0026#34;users/new\u0026#34;) end end def edit @user = User.find_by(id: params[:id]) end def update @user = User.find_by(id: params[:id]) @user.name = params[:name] @user.email = params[:email] if params[:image] @user.image_name = \u0026#34;#{@user.id}.jpg\u0026#34; image = params[:image] File.binwrite(\u0026#34;public/user_images/#{@user.image_name}\u0026#34;, image.read) end if @user.save flash[:notice] = \u0026#34;Your account has been updated successfully\u0026#34; redirect_to(\u0026#34;/users/#{@user.id}\u0026#34;) else render(\u0026#34;users/edit\u0026#34;) end end def login_form end def login @user = User.find_by(email: params[:email], password: params[:password]) if @user session[:user_id] = @user.id flash[:notice] = \u0026#34;You have logged in successfully\u0026#34; redirect_to(\u0026#34;/posts/index\u0026#34;) else @error_message = \u0026#34;Invalid email/password combination\u0026#34; @email = params[:email] @password = params[:password] render(\u0026#34;users/login_form\u0026#34;) end end def logout session[:user_id] = nil flash[:notice] = \u0026#34;You have logged out successfully\u0026#34; redirect_to(\u0026#34;/login\u0026#34;) end # Define the ensure_correct_user method def ensure_correct_user if @current_user.id != params[:id].to_i flash[:notice] = \u0026#34;Unauthorized access\u0026#34; redirect_to(\u0026#34;/posts/index\u0026#34;) end end end To keep login information, We use a special variable known as session. The value assigned to session is saved in the browser. Rails can use this value to identify the logged in user.\nIn order to log out, we should make the value of session[:user_id] empty. We can do this by assigning nil to session[:user_id]\nWe define ensure_correct_user method to verify that the logged in user and the user being edited are the same. And we\nFor authenticate user, we shall add before_action also in post_controller.rb\n1 2 3 class PostsController \u0026lt; ApplicationController before_action :authenticate_user ... Adding views in folder app/views/users create five files\nTo view all users, index.html.erb To show detail users, show.html.erb To edit user, edit.html.erb To view login form, login_form.html.erb To view signup form, new.html.erb Index Page This index page is to view all users,\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;div class=\u0026#34;main users-index\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;users-heading\u0026#34;\u0026gt;All Users\u0026lt;/h1\u0026gt; \u0026lt;% @users.each do |user| %\u0026gt; \u0026lt;div class=\u0026#34;users-index-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;user-left\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;\u0026lt;%= \u0026#34;/user_images/#{user.image_name}\u0026#34; %\u0026gt;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;user-right\u0026#34;\u0026gt; \u0026lt;%= link_to(user.name, \u0026#34;/users/#{user.id}\u0026#34;) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Detail Page This detail page is to show detail user\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;div class=\u0026#34;main user-show\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;user\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;\u0026lt;%= \u0026#34;/user_images/#{@user.image_name}\u0026#34; %\u0026gt;\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= @user.name %\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;\u0026lt;%= @user.email %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;% if @user.id == @current_user.id %\u0026gt; \u0026lt;%= link_to(\u0026#34;Edit\u0026#34;, \u0026#34;/users/#{@user.id}/edit\u0026#34;) %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Edit Form This edit form is to show a form to change user data\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;div class=\u0026#34;main users-edit\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-heading\u0026#34;\u0026gt;Edit Account\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form users-form\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-body\u0026#34;\u0026gt; \u0026lt;% @user.errors.full_messages.each do |message| %\u0026gt; \u0026lt;div class=\u0026#34;form-error\u0026#34;\u0026gt; \u0026lt;%= message %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= form_tag(\u0026#34;/users/#{@user.id}/update\u0026#34;, {multipart: true}) do %\u0026gt; \u0026lt;p\u0026gt;Name\u0026lt;/p\u0026gt; \u0026lt;input name=\u0026#34;name\u0026#34; value=\u0026#34;\u0026lt;%= @user.name %\u0026gt;\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Image\u0026lt;/p\u0026gt; \u0026lt;input name=\u0026#34;image\u0026#34; type=\u0026#34;file\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Email\u0026lt;/p\u0026gt; \u0026lt;input name=\u0026#34;email\u0026#34; value=\u0026#34;\u0026lt;%= @user.email %\u0026gt;\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Save\u0026#34;\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Login Form Create login_form.html.erb and put these lines\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;div class=\u0026#34;main users-new\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-heading\u0026#34;\u0026gt;Log in\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form users-form\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-body\u0026#34;\u0026gt; \u0026lt;% if @error_message %\u0026gt; \u0026lt;div class=\u0026#34;form-error\u0026#34;\u0026gt; \u0026lt;%= @error_message %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= form_tag(\u0026#34;/login\u0026#34;) do %\u0026gt; \u0026lt;p\u0026gt;Email\u0026lt;/p\u0026gt; \u0026lt;input name=\u0026#34;email\u0026#34; value=\u0026#34;\u0026lt;%= @email %\u0026gt;\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Password\u0026lt;/p\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; value=\u0026#34;\u0026lt;%= @password %\u0026gt;\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Log in\u0026#34;\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Signup Form For sign up, we create file views/users/new.html.erb and put these lines\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;div class=\u0026#34;main users-new\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-heading\u0026#34;\u0026gt;Sign up\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form users-form\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-body\u0026#34;\u0026gt; \u0026lt;% @user.errors.full_messages.each do |message| %\u0026gt; \u0026lt;div class=\u0026#34;form-error\u0026#34;\u0026gt; \u0026lt;%= message %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= form_tag(\u0026#34;/users/create\u0026#34;) do %\u0026gt; \u0026lt;p\u0026gt;Name\u0026lt;/p\u0026gt; \u0026lt;input name=\u0026#34;name\u0026#34; value=\u0026#34;\u0026lt;%= @user.name %\u0026gt;\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Email\u0026lt;/p\u0026gt; \u0026lt;input name=\u0026#34;email\u0026#34; value=\u0026#34;\u0026lt;%= @user.email %\u0026gt;\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Password\u0026lt;/p\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; value=\u0026#34;\u0026lt;%= @user.password %\u0026gt;\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Sign up\u0026#34;\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Sending File Two steps need to take care, the front-end side to accept user input and the backend for handling the file.\nSetting up The Form Add form field with input tag, image name and file type.\n1 2 3 4 5 6 \u0026lt;%= form_tag(\u0026#34;/users/#{@user.id}/update\u0026#34;, {multipart: true}) do %\u0026gt; ... \u0026lt;p\u0026gt;Image\u0026lt;/p\u0026gt; \u0026lt;input name=\u0026#34;image\u0026#34; type=\u0026#34;file\u0026#34;\u0026gt; ... \u0026lt;% end %\u0026gt; As we see the code above, We put {multipart: true} to the form_tag because sending an image is a special case. We need to know the detail later. For now just remember that {multipart: true} is necessary when sending image.\nCreating File To handle files with Ruby code, you can use the File class which is provided by Ruby by default. The write method of the File class creates a file. You can use it like: File.write(file_location, file_content)\nLet\u0026rsquo;s exercise to create file using Ruby in Rails console by running\n1 File.write(\u0026#34;public/sample.txt\u0026#34;, \u0026#34;Hello World\u0026#34;) In the update action, we will save the image in the public folder, and save the name of the file in the database.\nTo save the image name and put file on the public directory, create function such:\n1 2 3 4 5 6 7 8 9 def update ... if params[:image] @user.image_name = \u0026#34;#{@user.id}.jpg\u0026#34; image = params[:image] File.binwrite(\u0026#34;public/user_images/#{@user.image_name}\u0026#34;, image.read) end ... end We\u0026rsquo;ll use File.binwrite instead of File.write because image data is a special type of text. Also, the image data can be retrieved by using read method for the variable image as shown on the snippet above.\nLogin Create Login Page We\u0026rsquo;ll create following items for the Login page:\nThe route The action The view In the config/route.rb file, add\n1 2 3 4 Rails.application.routes.draw do get \u0026#34;login\u0026#34; =\u0026gt; \u0026#34;users#login_form\u0026#34; ... end In the app/controllers/users_controller.rb add action called login_form\n1 2 3 4 5 class UsersController \u0026lt; ApplicationController # Add a new action called \u0026#34;login_form\u0026#34; def login_form end end In the app/controllers/view, create a file named login_form.html.erb and paste the HTML below in the newly created file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;div class=\u0026#34;main users-new\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-heading\u0026#34;\u0026gt;Log in\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form users-form\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-body\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Email\u0026lt;/p\u0026gt; \u0026lt;input\u0026gt; \u0026lt;p\u0026gt;Password\u0026lt;/p\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Log in\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Lastly, let\u0026rsquo;s create a link to Login page.\n1 2 3 4 5 ... \u0026lt;li\u0026gt; \u0026lt;%= link_to(\u0026#34;Log in\u0026#34;, \u0026#34;/login\u0026#34;) %\u0026gt; \u0026lt;/li\u0026gt; ... Adding Login functionality Add new route for the login action\n1 2 3 4 5 Rails.application.routes.draw do get \u0026#34;login\u0026#34; =\u0026gt; \u0026#34;users#login_form\u0026#34; post \u0026#34;login\u0026#34; =\u0026gt; \u0026#34;users#login\u0026#34; ... end Now we\u0026rsquo;ll create action for login in the User controller\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class UsersController \u0026lt; ApplicationController ... def login @user = User.find_by(email: params[:email], password: params[:password]) if @user session[:user_id] = @user.id flash[:notice] = \u0026#34;You have logged in successfully\u0026#34; redirect_to(\u0026#34;/posts/index\u0026#34;) else @error_message = \u0026#34;Invalid email/password combination\u0026#34; @email = params[:email] @password = params[:password] render(\u0026#34;users/login_form\u0026#34;) end end ... end The code above tries to find User data by given email and password, and store in @user variable. If user find, user id will be stored in session, notification will be appear and page will be redirected to /posts/index.\nIf user not found, there will be error message and the parameters will be stored in default value since it would be convenient for the user to get the email and password they inputted when the form is redisplayed.\nThe render method is for redisplay login_form.\nIn the login_form.html.erb, we add functinality to send user input and set default value.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ... \u0026lt;div class=\u0026#34;form users-form\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-body\u0026#34;\u0026gt; \u0026lt;% if @error_message %\u0026gt; \u0026lt;div class=\u0026#34;form-error\u0026#34;\u0026gt; \u0026lt;%= @error_message %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= form_tag(\u0026#34;/login\u0026#34;) do %\u0026gt; \u0026lt;p\u0026gt;Email\u0026lt;/p\u0026gt; \u0026lt;input name=\u0026#34;email\u0026#34; value=\u0026#34;\u0026lt;%= @email %\u0026gt;\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Password\u0026lt;/p\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; value=\u0026#34;\u0026lt;%= @password %\u0026gt;\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Log in\u0026#34;\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ... To check your session feature, put this lines to show user_id on header\n1 2 3 4 5 6 7 8 9 \u0026lt;ul class=\u0026#34;header-menus\u0026#34;\u0026gt; \u0026lt;% if session[:user_id] %\u0026gt; \u0026lt;li\u0026gt; Current user ID: \u0026lt;%= session[:user_id] %\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; ... \u0026lt;/ul\u0026gt; Logout In this section we\u0026rsquo;ll learn hot to use before_action\nRestricted User Display the following in the header when a user is logged in:\nThe current user\u0026rsquo;s ID Post(/posts/index) New Post(/posts/index) Users(/users/index) Log out(/logout) When there\u0026rsquo;s no logged in user, the following links should be shown in the header:\nAbout(/about) Sign up(/signup) Log in(/login) These requirements can be achieved by putting this logic in header tag\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;ul class=\u0026#34;header-menus\u0026#34;\u0026gt; \u0026lt;% if @current_user %\u0026gt; \u0026lt;li\u0026gt; \u0026lt;%= link_to(@current_user.name, \u0026#34;/users/#{@current_user.id}\u0026#34;) %\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;%= link_to(\u0026#34;Posts\u0026#34;, \u0026#34;/posts/index\u0026#34;) %\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;%= link_to(\u0026#34;New post\u0026#34;, \u0026#34;/posts/new\u0026#34;) %\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;%= link_to(\u0026#34;Users\u0026#34;, \u0026#34;/users/index\u0026#34;) %\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;%= link_to(\u0026#34;Log out\u0026#34;, \u0026#34;/logout\u0026#34;, {method: :post}) %\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;% else %\u0026gt; \u0026lt;li\u0026gt; \u0026lt;%= link_to(\u0026#34;About\u0026#34;, \u0026#34;/about\u0026#34;) %\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;%= link_to(\u0026#34;Sign up\u0026#34;, \u0026#34;/signup\u0026#34;) %\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;%= link_to(\u0026#34;Log in\u0026#34;, \u0026#34;/login\u0026#34;) %\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; Post Restriction In the Application Controller we already put\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class ApplicationController \u0026lt; ActionController::Base before_action :set_current_user def set_current_user @current_user = User.find_by(id: session[:user_id]) end def authenticate_user if @current_user == nil flash[:notice] = \u0026#34;You must be logged in\u0026#34; redirect_to(\u0026#34;/login\u0026#34;) end end ... This authentication_user method limits access the controller action. To use it on all actions in the the Post Controoler, We put before_action with this method.\n1 2 3 4 class PostsController \u0026lt; ApplicationController before_action :authenticate_user ... end User Restriction In the Application Controller, we also put method forbid_login_user\n1 2 3 4 5 6 7 8 ... def forbid_login_user if @current_user flash[:notice] = \u0026#34;You are already logged in\u0026#34; redirect_to(\u0026#34;/posts/index\u0026#34;) end end ... This method prevent already logged user to access login or signup page. To use this method, put this on User Controller after before_action and use only argument to put actions related to login and signup\n1 2 3 4 5 6 7 8 9 10 11 class UsersController \u0026lt; ApplicationController before_action :authenticate_user, {only: [:index, :show, :edit, :update]} before_action :forbid_login_user, {only: [:new, :create, :login_form, :login]} before_action :ensure_correct_user, {only: [:edit, :update]} ... def ensure_correct_user if @current_user.id != params[:id].to_i flash[:notice] = \u0026#34;Unauthorized access\u0026#34; redirect_to(\u0026#34;/posts/index\u0026#34;) end ... ","date":"2022-02-07T00:00:00Z","image":"https://ayw.codeberg.page/p/twitor-2/ruby_hu169ad9fa26116558547dfb60c1b64219_42863_120x120_fill_q75_box_smart1.jpeg","permalink":"https://ayw.codeberg.page/p/twitor-2/","title":"Twitor #2: Create User"},{"content":"Intro In this chapter we are going to connected user and post database, also creating like feature.\nModifying Database Add user_id to Post To start, let\u0026rsquo;s create a migration file with the filename \u0026ldquo;add_user_id_to_posts\u0026rdquo; using the rails g migration command. We\u0026rsquo;ll modify the content of the migration file as shown below\n1 2 3 4 5 class AddUserIdToPosts def change add_column :posts, :user_id, :integer end end then run rails db:migrate\nAdd likes table Let\u0026rsquo;s create the Like model and a migration file using the command\nrails g model Like user_id:integer post_id:integer This table will have two columns, user_id and post_id. After migration has been created, run rails db:migrate to apply changes to the database.\nAdd validation Post Model Each post shall have a creater, so in file of models/post.rb\n1 2 3 4 class Post \u0026lt; ApplicationRecord ... validates :user_id, {presence: true} end Like Model Sine the \u0026ldquo;like\u0026rdquo; data is incomplete unless both user_id and post_id exist, let\u0026rsquo;s add the validtion presence: true for both user_id and post_id.\n1 2 3 4 class Like \u0026lt; ApplicationRecord validates :user_id, {presence: true} validates :post_id, {presence: true} end Add routes For like and dislike action, we need to create new route to handle this. We also need to create new route for viewing user\u0026rsquo;s like in the user detail page\n1 2 3 4 post \u0026#34;likes/:post_id/create\u0026#34; =\u0026gt; \u0026#34;likes#create\u0026#34; post \u0026#34;likes/:post_id/destroy\u0026#34; =\u0026gt; \u0026#34;likes#destroy\u0026#34; get \u0026#34;users/:id/likes\u0026#34; =\u0026gt; \u0026#34;users#likes\u0026#34; Modifying Controller Add before_action on Post We\u0026rsquo;ll limit access to the edit, update, and destroy actions. So we define the ensure_correct_user method in the Post controller,\n1 2 3 4 5 6 7 8 9 10 ... # Define the ensure_correct_user method def ensure_correct_user @post = Post.find_by(id: params[:id]) if @current_user.id != @post.user_id flash[:notice] = \u0026#34;Unauthorized access\u0026#34; redirect_to(\u0026#34;/posts/index\u0026#34;) end end ... and use this method\n1 2 3 4 5 class PostsController \u0026lt; ApplicationController before_action :authenticate_user # Set the ensure_correct_user method as a before_action before_action :ensure_correct_user, {only: [:edit, :update, :destroy]} ... Display user name and image in Post To do this, define @user in method show in Post Controller. See previous steps here\n1 2 3 4 def show @post = Post.find_by(id: params[:id]) @user = @post.user end Noted that we can use method .user on @post instance since we declare code below in the post model.\n1 2 3 4 5 6 7 8 9 class Post \u0026lt; ApplicationRecord validates :content, {presence: true, length: {maximum: 140}} validates :user_id, {presence: true} def user return User.find_by(id: self.user_id) end end Save user_id to Post In file posts_controller.rb, put\n1 2 3 4 5 6 def create @post = Post.new( content: params[:content], user_id: @current_user.id ) end Add like action on User We will create user\u0026rsquo;s like on the user detail /users/show.html.erb, then we need to prepare data that we want to pass to template from database by creating new method in users_controller.rb\n1 2 3 4 5 6 7 8 9 10 ... def likes # Define the @user variable @user = User.find_by(id: params[:id]) # Define the @likes variable @likes = Like.where(user_id: @user.id) end ... Set LikesController We want to users can like post undo their like so we create new controller to handle likes table and should put create and destroy action in this controller.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class LikesController \u0026lt; ApplicationController before_action :authenticate_user def create @like = Like.new(user_id: @current_user.id, post_id: params[:post_id]) @like.save redirect_to(\u0026#34;/posts/#{params[:post_id]}\u0026#34;) end def destroy @like = Like.find_by(user_id: @current_user.id, post_id: params[:post_id]) @like.destroy redirect_to(\u0026#34;/posts/#{params[:post_id]}\u0026#34;) end end Modifying Views Post Views Importing font awesome Add font-awesome to head tag in views/layouts/application.html.erb\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;TweetApp\u0026lt;/title\u0026gt; \u0026lt;%= csrf_meta_tags %\u0026gt; \u0026lt;%= stylesheet_link_tag \u0026#39;application\u0026#39;, media: \u0026#39;all\u0026#39;, \u0026#39;data-turbolinks-track\u0026#39;: \u0026#39;reload\u0026#39; %\u0026gt; \u0026lt;%= javascript_include_tag \u0026#39;application\u0026#39;, \u0026#39;data-turbolinks-track\u0026#39;: \u0026#39;reload\u0026#39; %\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; ... Displaying User on Post Index To add user data on post index, we should modify /app/views/posts/index.html.erb\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;div class=\u0026#34;main posts-index\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;% @posts.each do |post| %\u0026gt; \u0026lt;div class=\u0026#34;posts-index-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;post-left\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;\u0026lt;%= \u0026#34;/user_images/#{post.user.image_name}\u0026#34; %\u0026gt;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;post-right\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;post-user-name\u0026#34;\u0026gt; \u0026lt;%= link_to(post.user.name, \u0026#34;/users/#{post.user.id}\u0026#34;) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;%= link_to(post.content, \u0026#34;/posts/#{post.id}\u0026#34;) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; in line 6, post instance using user method since we already declare instance method here.\nDisplaying likes on Post Detail We will put like information in post detail posts/show.html.erb by writing a condition such \u0026lt;% if Like.find_by(user_id: @current_user.id, post_id: @post.id) %\u0026gt;and write likes count \u0026lt;%= @likes_count %\u0026gt;.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;div class=\u0026#34;main posts-show\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;posts-show-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;post-user-name\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;\u0026lt;%= \u0026#34;/user_images/#{@user.image_name}\u0026#34; %\u0026gt;\u0026#34;\u0026gt; \u0026lt;%= link_to(@user.name, \u0026#34;/users/#{@user.id}\u0026#34;) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt; \u0026lt;%= @post.content %\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;post-time\u0026#34;\u0026gt; \u0026lt;%= @post.created_at %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% if Like.find_by(user_id: @current_user.id, post_id: @post.id) %\u0026gt; \u0026lt;%= link_to(\u0026#34;/likes/#{@post.id}/destroy\u0026#34;, {method: \u0026#34;post\u0026#34;}) do %\u0026gt; \u0026lt;span class=\u0026#34;fa fa-heart like-btn-unlike\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;% else %\u0026gt; \u0026lt;%= link_to(\u0026#34;/likes/#{@post.id}/create\u0026#34;, {method: \u0026#34;post\u0026#34;}) do %\u0026gt; \u0026lt;span class=\u0026#34;fa fa-heart like-btn\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= @likes_count %\u0026gt; \u0026lt;% if @post.user_id == @current_user.id %\u0026gt; \u0026lt;div class=\u0026#34;post-menus\u0026#34;\u0026gt; \u0026lt;%= link_to(\u0026#34;Edit\u0026#34;, \u0026#34;/posts/#{@post.id}/edit\u0026#34;) %\u0026gt; \u0026lt;%= link_to(\u0026#34;Delete\u0026#34;, \u0026#34;/posts/#{@post.id}/destroy\u0026#34;, {method: \u0026#34;post\u0026#34;}) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; To use the link_to method with an HTML element, you need to use a slightly different syntax. Like the code below, you can write an HTML element between \u0026lt;%= link_to(URL) do %\u0026gt; and \u0026lt;% end %\u0026gt;, and make that HTML part a link\nHTML link to\nUser View Displaying posts on user detail To display user\u0026rsquo;s posts on the index page of user views/users/show.html.erb, we put extra feature:\nuser\u0026rsquo;s posts user\u0026rsquo;s likes tabs for switch between user\u0026rsquo;s posts and user\u0026rsquo;s likes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;div class=\u0026#34;main user-show\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;user\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;\u0026lt;%= \u0026#34;/user_images/#{@user.image_name}\u0026#34; %\u0026gt;\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= @user.name %\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;\u0026lt;%= @user.email %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;% if @user.id == @current_user.id %\u0026gt; \u0026lt;%= link_to(\u0026#34;Edit\u0026#34;, \u0026#34;/users/#{@user.id}/edit\u0026#34;) %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;ul class=\u0026#34;user-tabs\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;\u0026lt;%= link_to(\u0026#34;Posts\u0026#34;, \u0026#34;/users/#{@user.id}\u0026#34;) %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= link_to(\u0026#34;Likes\u0026#34;, \u0026#34;/users/#{@user.id}/likes\u0026#34;) %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;% @user.posts.each do |post| %\u0026gt; \u0026lt;div class=\u0026#34;posts-index-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;post-left\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;\u0026lt;%= \u0026#34;/user_images/#{post.user.image_name}\u0026#34; %\u0026gt;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;post-right\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;post-user-name\u0026#34;\u0026gt; \u0026lt;%= link_to(post.user.name, \u0026#34;/users/#{post.user.id}\u0026#34;) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;%= link_to(post.content, \u0026#34;/posts/#{post.id}\u0026#34;) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; In line number 20, there is posts method on @user instance. to enable this, we should add posts, a instance method on models/user.rb\n1 2 3 4 5 6 class User \u0026lt; ApplicationRecord ... def posts return Post.where(user_id: self.id) end end To enable view of user\u0026rsquo;s likes, we should create additional template views/users/likes.html.erb\nUser Likes In views/users/likes.html.erb,\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 \u0026lt;!-- Paste the HTML here --\u0026gt; \u0026lt;div class=\u0026#34;main user-show\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;user\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;\u0026lt;%= \u0026#34;/user_images/#{@user.image_name}\u0026#34; %\u0026gt;\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= @user.name %\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;\u0026lt;%= @user.email %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;% if @user.id == @current_user.id %\u0026gt; \u0026lt;%= link_to(\u0026#34;Edit\u0026#34;, \u0026#34;/users/#{@user.id}/edit\u0026#34;) %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;ul class=\u0026#34;user-tabs\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= link_to(\u0026#34;Posts\u0026#34;, \u0026#34;/users/#{@user.id}\u0026#34;) %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;\u0026lt;%= link_to(\u0026#34;Likes\u0026#34;, \u0026#34;/users/#{@user.id}/likes\u0026#34;) %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;!-- Get each element of @likes using the each method --\u0026gt; \u0026lt;% @likes.each do |like| %\u0026gt; \u0026lt;!-- Define the post variable --\u0026gt; \u0026lt;% post = Post.find_by(id: like.post_id)%\u0026gt; \u0026lt;div class=\u0026#34;posts-index-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;post-left\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;\u0026lt;%= \u0026#34;/user_images/#{post.user.image_name}\u0026#34; %\u0026gt;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;post-right\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;post-user-name\u0026#34;\u0026gt; \u0026lt;%= link_to(post.user.name, \u0026#34;/users/#{post.user.id}\u0026#34;) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;%= link_to(post.content, \u0026#34;/posts/#{post.id}\u0026#34;) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- Add an end statement --\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ","date":"2022-02-07T00:00:00Z","image":"https://ayw.codeberg.page/p/twitor-3/ruby_hu169ad9fa26116558547dfb60c1b64219_42863_120x120_fill_q75_box_smart1.jpeg","permalink":"https://ayw.codeberg.page/p/twitor-3/","title":"Twitor #3: Like Features"},{"content":"Intro Now we are going to secure our web\nhash password session token Install Gem When encrypting passwords with Rails, something known as a gem is required. A gem is a third-party library you can use with Ruby. There are various gems such as \u0026ldquo;the search functionality gem\u0026rdquo;, or \u0026ldquo;the encrypt passwords gems\u0026rdquo;. This time we\u0026rsquo;ll use bcrypt, which is a gem to encrypt password.\nIn Rails, there\u0026rsquo;s a file named Gemfile where you write the gems you want to install, like gem 'gem_name'. Some gems are already written when you run the rails new command. When you install gems, the Gemfile.lock file is automatically updated.\nYou can specify the version of the gem, like gem 'rails', '5.0.3'. If you don\u0026rsquo;t specify\nThis time, we\u0026rsquo;ll add a gem known as bcrypt. You can do this by adding gem 'bcrypt\u0026rsquo; to the Gemfile, and run the command bundle install in the terminal.\nAfter installing bcrypt, we can use a method known as has_secure_password. By adding it to the User model, Rails will automatically encrypt the password when saving the user..\nAdd password_digest column The password is stored in the password_digest column for safety, not in password column, after being encrypted by has_secure_password method. Then, we need to add password_digest column and remove the existing password column from database.\nLet\u0026rsquo;s create a migration file rails g migration change_users_columns. After creating a file, as We can change multiple columns in one migration file, edit the migration file so that the password_digest column is added and also remove the password column.\n1 2 3 4 5 6 class ChangeUsersColumns \u0026lt; ActiveRecord::Migration[5.0] def change add_column :users, :password_digest, :string remove_column :users, :password, :string end end Then run rails db:migrate\nUsing Encrypted Password Create To save the encrypted password in the password_digest column, we can assign the value to password as we\u0026rsquo;ve done before. The value assigned to password will be encrypted by has_secure_password, then stored in the password_digest column. Therefore, there\u0026rsquo;s no need to change the existing code for the password.\nIn rails console rails c, try to get a user like user = User.first and assign a password on it user.password = yourcustompass. Then check on our database, the password_digest column should be filed.\nLogin With the has_secure_password method, you can use the authenticate method. This method encrypts the received argument and compares it with the value of password_digest. We can use this to judge whether the password sent from matches the password_digest. In the user_controller.rb we modify login method, so then\n1 2 3 4 5 6 7 8 ... def login # Rewrite the following line to only use the email to find the user @user = User.find_by(email: params[:email]) # Rewrite the if statement using \u0026amp;\u0026amp; and the \u0026#34;authenticate\u0026#34; method if @user \u0026amp;\u0026amp; @user.authenticate(params[:password]) session[:user_id] = @user.id ... ","date":"2022-02-07T00:00:00Z","image":"https://ayw.codeberg.page/p/twitor-4/ruby_hu169ad9fa26116558547dfb60c1b64219_42863_120x120_fill_q75_box_smart1.jpeg","permalink":"https://ayw.codeberg.page/p/twitor-4/","title":"Twitor #4: Secure"},{"content":"Intro In this section we are going to dive deep into database migration.\nCreate new table We use the model Bond to indicate a connection between one user and another. It has the state field to indicate the state of the connection.\nSchema Schema of Bound\nColumn Data Type Options id int Primary key, non-null user_id int Foreign key(users), non-null friend_id int Foreign key(users), non-null state string Non-null Possible value of state\nState Description requesting When a user sends a follow request to another user (which will be accepted automatically if it is a public account) following When a user is following another user blocking When a user is blocked another user Generate Migration File Command to scaffold Bond\n1 rails g model bond user_id:integer friend_id:integer state Modify Migration File After that, let\u0026rsquo;s enforce non-null constraints as shown below\n1 2 3 4 5 6 7 8 9 10 class CreateBonds \u0026lt; ActiveRecord::Migration[6.1] def change create_table :bonds do |t| t.integer :user_id, null: false t.integer :friend_id, null: false t.string :state, null: false t.timestamps end ... Next, let\u0026rsquo;s make user_id and friend_id a unique combination. This way, there is no way the table can have multiple bond records between the same user A and the same user B for those fields, respectively.\n1 2 3 4 5 6 7 8 def change create_table :bonds do |t| ... end add_index :bonds, [:user_id, :friend_id], unique: true add_foreign_key :bonds, :users, column: :user_id add_foreign_key :bonds, :users, column: :friend_id end As we have bonds.user_id and bonds.friend_id referencing users.id, we add a foreign key for each of them in line 3 and 4.\nSchema Statement https://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html\n","date":"2022-02-07T00:00:00Z","image":"https://ayw.codeberg.page/p/twitor-5/ruby_hu169ad9fa26116558547dfb60c1b64219_42863_120x120_fill_q75_box_smart1.jpeg","permalink":"https://ayw.codeberg.page/p/twitor-5/","title":"Twitor #5: Add Bond"},{"content":"This project made based on Rails Tutorial | Building a Blog with Ruby on Rails 6 using Rails 6.1.6 and Ruby 2.6.3p62. I am curious whether Rails can be used to make a blog like Wordpress so then I tried to follow this tutorial.\nGenerate New Project Gem Configuration Generate new project by running rails new simple-blog. Go to project folder cd simple-blog and open up Gemfile then commented out gem \u0026lsquo;jbuilder\u0026rsquo; since we don\u0026rsquo;t want to generate JSON or API like project. And add gem devise for authentication then run bundle.\n1 2 3 4 5 6 ... # gem \u0026#39;jbuilder\u0026#39;, \u0026#39;~\u0026gt; 2.7\u0026#39; # Reduces boot times through caching; required in config/boot.rb gem \u0026#39;bootsnap\u0026#39;, \u0026#39;\u0026gt;= 1.4.4\u0026#39;, require: false gem \u0026#39;devise\u0026#39; ... Run rails g controller Home index in the terminal. This will create Home Controller with index action. It will be deleted later but for now we just want to have home index. So if we run local server rails s and go to localhost:3000 page on the web browser, we will see home page index.\nSetting Authentication with devise Lets create devise modal rails g devise:install and this is gonna take us to few things that we need to care. Follow the step and run rails g devise:views in the terminal.\nThen let\u0026rsquo;s create modal called Author with login authentication, rails g devise Author, then migrate it, rails db:migrate. Then try to open localhost:3000/authors/sign_up on the browser and we\u0026rsquo;ll see a sign-up page. Try to sign-up your first account and, TA-DA, you\u0026rsquo;ve got authentication set up in just a couple of minutes.\nCreate Post and Author Authentication Generate post modal by running this line in the terminal. This command will create field title - since we don\u0026rsquo;t specify the data type, it will generate string type -, published, published_at and author.\n1 rails g scaffold Post title description:text published:boolean published_at:datetime author:references Then try run localhost:3000/posts on your browser and play around with it and see how it all works.\nCreate Authentication for Post We want to post only can be accessed when Author get authentication so we move posts resources under Author scope in route\n1 2 3 4 5 6 ... root to: \u0026#34;home#index\u0026#34; scope module: \u0026#39;authors\u0026#39; do resources :posts end end Then try to see the result localhost:3000/posts and you\u0026rsquo;ll get a \u0026lsquo;Routing Error - uninitialized constant Authors\u0026rsquo; because, instead of PostsController, it\u0026rsquo;s wanting to look at Authors::PostsController. To solve this, create new folder called authors under app/controllers and move post_controller.rb in it. Also in that file, wrap up all existing code inside module Authors / end.\nAnd now go back to web browser and refresh. Oh no, You still see an error \u0026lsquo;No template for interactive request\u0026rsquo;. To solve this, you just need to crate new folder authors under app/views and move folder posts into the authors folder.\nCheck again the page and now it should work.\nCreate one-many relation for Author and Post Add relationship between posts and author \u0026lsquo;has_many :posts\u0026rsquo; in the file app/models/author.rb so the code looks like\n1 2 3 4 5 6 ... devise :database_authenticatable, :registerable, :recoverable, :rememberable, :validatable has_many :posts end Enable Authentication Create new controller called authors_controller.rb under app/controllers folder, put this line in the file,\n1 2 3 class AuthorsController \u0026lt; ApplicationController before_action :authenticate_author! end save it and change inherit code from class PostsController \u0026lt; ApplicationController to class PostsController \u0026lt; AuthorsController in the posts_controller.rb file.\nLet\u0026rsquo;s try run localhost:3000/posts and perhaps there is no differences since you\u0026rsquo;ve just sign up new account. Open another browser and access the address, then you see the new browser redirect to login page.\nAuthor Layout Specify layout for author in the authors_controller.rb file\n1 2 3 4 class AuthorsController \u0026lt; ApplicationController before_action :authenticate_author! layout \u0026#39;authors\u0026#39; end Refresh page localhost:3000/posts in the browser then you get error \u0026lsquo;Tempate is missing\u0026rsquo;. Solving this error, you need to create new template file called authors.html.erb in the folder app/views/layouts and copy all codes in application.html.erb to the new file.\nSetting Post Layout Setting bootstrap Open BootstrapCDN on web browser and copy bootstrap.min.css into authors.html.erb file and paste under head tag. Next, Go to app/stylesheets and delete scaffold.scss file.\nSetting Post Controller In the file app/views/authors/posts/_form.html.erb, take away publish and author related fields. Edit posts_controller.rb. Change POST to \u0026lsquo;current_author.posts\u0026rsquo; in \u0026lsquo;set_index\u0026rsquo;, \u0026lsquo;create\u0026rsquo;, \u0026lsquo;index\u0026rsquo; and \u0026rsquo;new\u0026rsquo;. Delete unwanted fields that we want to send from form so the final codes look like\nSetting Author Layout Edit parent layout app/layouts/authors.html.erb so that \u0026lsquo;\u0026lt;%= yield %\u0026gt;\u0026rsquo;, code that place chlid template, wrap in class container\n1 2 3 4 5 6 7 8 9 10 11 ... \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;bg-light\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;notice\u0026#34;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;alert\u0026#34;\u0026gt;\u0026lt;%= alert %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Setting Posts Layout Edit child page layout for index action \u0026lsquo;app/views/authors/posts/index.html.erb\u0026rsquo;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;h4 class=\u0026#39;d-flex justify-content-between\u0026#39;\u0026gt; \u0026lt;span\u0026gt;Posts\u0026lt;/span\u0026gt; \u0026lt;%= link_to \u0026#39;New Post\u0026#39;, new_post_path, class: \u0026#39;btn btn-primary\u0026#39; %\u0026gt; \u0026lt;/h4\u0026gt; \u0026lt;% @posts.each do |post| %\u0026gt; \u0026lt;%= link_to edit_post_path(post), class: \u0026#39;text-decoration-none\u0026#39; do %\u0026gt; \u0026lt;div class=\u0026#34;card mb-3\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt; \u0026lt;h5 class=\u0026#34;card-title mb-1 text-dark\u0026#34;\u0026gt; \u0026lt;%= post.title %\u0026gt; \u0026lt;/h5\u0026gt; \u0026lt;p class=\u0026#34;text-secondary mb-0\u0026#34;\u0026gt; \u0026lt;%= post.description %\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;% end %\u0026gt; In here, we also change link to access post-edit layout instead of showing posts, then remove template to show them. Delete the file \u0026lsquo;app/views/authors/posts/show.html.erb\u0026rsquo;. The next, \u0026lsquo;show\u0026rsquo; action def and \u0026lsquo;show\u0026rsquo; symbol in before_action in the file \u0026lsquo;posts_controller.rb\u0026rsquo; shall be removed.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 module Authors class PostsController \u0026lt; AuthorsController before_action :set_post, only: [:edit, :update, :destroy] # GET /posts def index @posts = current_author.posts end # GET /posts/new def new @post = current_author.posts.build end # GET /posts/1/edit def edit end # POST /posts def create @post = current_author.posts.build(post_params) if @post.save redirect_to @post, notice: \u0026#39;Post was successfully created.\u0026#39; else render :new end end # PATCH/PUT /posts/1 def update if @post.update(post_params) redirect_to @post, notice: \u0026#39;Post was successfully updated.\u0026#39; else render :edit end end # DELETE /posts/1 def destroy @post.destroy redirect_to posts_url, notice: \u0026#39;Post was successfully destroyed.\u0026#39; end private # Use callbacks to share common setup or constraints between actions. def set_post @post = current_author.posts.find(params[:id]) end # Only allow a list of trusted parameters through. def post_params params.require(:post).permit(:title, :description) end end end menit 26:53\n. . . . .\nCreate Element 1 rails g scaffold Element element_type:string content:text post:references position:integer --skip-template-engine run db:migrate and move file elements_controller.rb from controllers folder into controllers/authors folder. Wrap all existing codes into module Authors and end tags. Then change enherit tag class ElementsController \u0026lt; ApplicationController to class ElementsController \u0026lt; AuthorsController.\nIn the route.rb we want to make element nested in the post resource so the code will look like\n1 2 3 4 5 6 7 ... scope module: \u0026#39;authors\u0026#39; do resources :posts do resources :elements end end end Check the routes for element by running rails routes | grep element in the terminal.\n","date":"2022-02-06T00:00:00Z","image":"https://ayw.codeberg.page/p/rails-simple-blog-1/ruby_hu169ad9fa26116558547dfb60c1b64219_42863_120x120_fill_q75_box_smart1.jpeg","permalink":"https://ayw.codeberg.page/p/rails-simple-blog-1/","title":"Simple Blog with Rails #1"},{"content":"In this article, I\u0026rsquo;d like to create a website using Ruby without any web framework. Firstly, write down this code lines into a file, e.g. web.rb\nThen run command ruby web.rb in your terminal. Or use nohup ruby web.rb \u0026amp; if you want to run server in the background.\nreferences:\nBuilding a Ruby web app using the Ruby Standard Library by Maple Ong How to use Nohup in Linux ","date":"2022-01-02T00:00:00Z","image":"https://ayw.codeberg.page/p/ruby-website/ruby_hu169ad9fa26116558547dfb60c1b64219_42863_120x120_fill_q75_box_smart1.jpeg","permalink":"https://ayw.codeberg.page/p/ruby-website/","title":"Making a Ruby website using standard library"},{"content":"Everything is an Object There are relatively few primitive and many things in Ruby are expressed in terms of objects and methods.\nAn object is a collection of data and methods. Methods return the object\u0026rsquo;s data or manipulate it.\nRuby is dynamic typing. Variable can refer to objects of different types.\nTerms The terms related to Object Oriented in Ruby\nInstance Variable Instance Method Object Initialization Destruction Accessor Virtual Attributes Class Method Class Variable Instance Variable @ We are setting an instance variable called title. Instance variable in Ruby are denoted with @. They are called instance variable because each instance of the book class is going to have its own copy of title string.\n1 2 3 4 5 class Book def title=(s) @title = s end end Before we call title= method, the title variable doesn\u0026rsquo;t exist in the object. The equal sign in the method name may look unusual coming from other languages. It\u0026rsquo;s there to indicate that the method is a write accessor and to allow you to write b.title = the name of the book\nLet create a book instance b = Book.new and put new title b.title = \u0026quot;How to Code\u0026quot;. There should be no problem. But when we try to access the title by run b.title. It will produce an error.\nnew is so-called constructor, and it is and example of a class method. We can think of a new method as a factory which stamps out an object based on the blueprint defined by a class.\nOpen Classes Now we\u0026rsquo;re going to add a class to read book title by running\n1 2 3 4 5 class Book def title @title end end This feature is called Open Classes.\nAccessor Writing all the read and write accessor methods (getter and setter) like previous manually would be quite an exercise in typing. Fortunately, we have a convenient alternative. We can use attr_accessor to provide read and write accessors for an instance variable. Both code below are equivalent.\nIf we want to limit the user to write only, we can use attr_write :title. If we want to limit user to read only, we can use attr_read :title.\nWe can use attr to multiple fields by separating them with coma , like attr_accessor :title, :author, :pub_year.\nWhen you use accessors inside a method in a class use self. before the variable.\n1 2 3 4 5 6 7 8 class Book attr_accessor :small_cover, :large_cover def cover_url=(url) self.small_cover = url + \u0026#34;-small.jpg\u0026#34; self.large_cover = url + \u0026#34;-large.jpg\u0026#34; end end More about self read this article https://www.rubyguides.com/2020/04/self-in-ruby/\nInitialize Is a method for creating instance by passing argument to constructor method new.\nCreating new object with acessor method like code below is cumbersome and error prone.\n1 2 3 4 b = Book.new b.title = \u0026#34;Code\u0026#34; b.author = \u0026#34;Ruby Red\u0026#34; b.pub_year = 2020 We can write simpler using Book.new(title: \u0026quot;Code\u0026quot;, author: \u0026quot;Ruby Red\u0026quot;, pub_year: 2020). To use this method we should define initialize method in the class like\n1 2 3 4 5 6 7 class Book def initialize(title:, author:, pub_year:) @title = title @author = author @pub_year = pub_year end end Virtual Attribute If an accessor method doesn\u0026rsquo;t directly get or set an instance variable, it defines a virtual attribute.\nClass Methods is called on a class instead of an object new is an example of a class method is independent of specific object state, but still related to the entity modeled by a class. For example, we want to add search feature in Book class and the convenient would be to call Book.find. To define a class method, you need to prefix its name with self dot self.\nClass Variable @@ Class variable maintain class-level state which can be referred to by class methods. For example, we might want to keep track of the number of search queries for books.\n1 2 3 4 5 6 7 8 9 10 11 12 13 class Book @@search_count = 0 def self.find(title) @@search_count += 1 Book.new(title: \u0026#34;Code\u0026#34;, author: \u0026#34;Ruby Red\u0026#34;, pub_year: 2020) end # accessor to read @@search_count def self.search_count @@search_count end end A class variable is denoted with a double @@ and initialized in the body of the class. There is only one copy of a class variable per class and it\u0026rsquo;s shared between all objects. A class variable isn\u0026rsquo;t visible outside the class so we have to write accessor class method for it if we need to access it from the outside.\nClass Instance Variable What happens with class instance variable is that the parent class and each of the subclasses has its own copy of the variable but only one per class.\nLet\u0026rsquo;s define a collection class with a class instance variable for search_count.\n1 2 3 4 5 6 7 8 9 10 11 12 class Collection @search_count = 0 def self.find @search_count += 1 end # read accessor def self.search_count @search_count end end As with class variables, I\u0026rsquo;am setting the variable in line 2, but note that single @ instead of double. Instance variables which are set in the class body or in a class method become variables in the class itself rather than in objects.\nNow we can create a specialized collection class with its own search_count, for example, for book series. And like with class variable, the class instance variable also needs to be initialized in each subclass.\n1 2 3 class Series \u0026lt; Collection @search_count = 0 end Now try to run Collection.find once, and Series.find twice. Then for Collection.search_count will result 1 and for Series.search_count yield 2.\nOperators An interesting feature of Ruby is that many operators are implemented as method calls on objects. They just have a little bit of syntatic sugar on top so using them doesn\u0026rsquo;t look like calling methods.\nLet\u0026rsquo;s see if this can be applied to the Collection class. The collection contains an array of book objects, and we might want to provide convenient array-like access to it without exposing the actual book array, because we don\u0026rsquo;t want it manipulated in arbitrary ways. We can do it by defining a square brackets operator.\n1 2 3 4 5 6 7 8 9 10 11 12 13 class Collection attr_reader :name def initialize(name) @name = name @books = [] end def []index @books[index] end end Adding an append operator may be handy for populating Collections with books.\n1 2 3 4 5 class Collection def \u0026lt;\u0026lt;(book) @books \u0026lt;\u0026lt; book end end Now you can add collection with this way\n1 2 3 c = Collection.new(\u0026#34;Software\u0026#34;) c \u0026lt;\u0026lt; Book.new(title: \u0026#34;Code\u0026#34;, author: \u0026#34;Ruby Red\u0026#34;, pub_year: 2020) c \u0026lt;\u0026lt; Book.new(title: \u0026#34;Hacking\u0026#34;, author: \u0026#34;Hack with Ruby\u0026#34;, pub_year: 2013) It\u0026rsquo;s even possible to define unary operators for a class. For example, we could redefine the not operator to return false when a Collection is empty\n1 2 3 4 5 class Collection def ! @books.empty? end end This would allow you to test the Collection state in conditionals like this.\n1 2 3 4 c = Collection.new(\u0026#34;Empty\u0026#34;) if !c puts \u0026#34;Collection #{c.name} is empty.\u0026#34; end Class Equality Sometimes we may need to check whether an object is an instance of a particular class. For example, when generating the HTML for different types of collections, you might use a case expression to branch on collection class\n1 2 3 4 5 6 7 8 def collection_html(collection) case collection when Series # return series-specific HTML when Collection # return generic collection HTML end end This means that the collection class has to be compared with the classes specified in the when clauses.\nThere are a couple of other options:\nkind_of? or is_a, they check instance of parent as well, example: series.kind_of(Book) instance_of?_, is more strict, only work if it in the same class, example: book.instance_of(Book) ","date":"2022-01-02T00:00:00Z","image":"https://ayw.codeberg.page/images/ruby.png","permalink":"https://ayw.codeberg.page/p/ruby-oop/","title":"Object Oriented Ruby"},{"content":"Intro This is a fun project to extract pokemon data from csv using Ruby.\nWhat we learn In this project we\u0026rsquo;ll learn\nHow to load and work with CSV in Ruby How to filter array data Requirement Ruby pokemon.csv download Problem As we see in the image below,\nI want to choose grass-type pokemon with has attack in medium level, no more than 100 and no less than 90 attack attribute.\nSolution To solve the problem, let\u0026rsquo;s create some experiment using irb console.\nFilter a row Import CSV standard library by run require \u0026quot;csv\u0026quot;. Load CSV data and store in a variable, pokemons = CSV.read(\u0026quot;pokemon.csv\u0026quot;) Read data on row 1 by using, pokemens[1] There are two columns that mark the type of Pokemon, 2 and 3. So we should check these columns. pokemons[1][2] == \u0026quot;Grass\u0026quot; || pokemons[1][3] == \u0026quot;Grass\u0026quot; Then we check column 6 from the table to get attack data, convert to integer, and check the range value. pokemons[1][6].to_i.between?(90,100) Put together in a method 1 2 3 4 5 6 7 require \u0026#34;csv\u0026#34; pokemons = CSV.read(\u0026#34;pokemon.csv\u0026#34;) def is_pokemon_type?(pokemon) (pokemon[2] == \u0026#34;Grass\u0026#34; || pokemon[3] == \u0026#34;Grass\u0026#34;) \u0026amp;\u0026amp; pokemon[6].to_i.between?(90, 100) end Filter all rows Then, to get all rows that meet the criteria we create loop\n1 2 3 4 5 6 7 selected_pokemons = [] for i in 0...pokemons.size do if is_pokemon_type?(pokemons[i]) selected_pokemons \u0026lt;\u0026lt; pokemons[i] end end The result can be seen by running p selected_pokemons\nUse blocks From the function we defined earlier\n1 2 3 def is_pokemon_type?(pokemon) return (pokemon[2] == \u0026#34;Grass\u0026#34; || pokemon[3] == \u0026#34;Grass\u0026#34;) \u0026amp;\u0026amp; pokemon[6].to_i.between?(90, 100) end and turn it into a block\n1 { |pokemon| (pokemon[2] == \u0026#34;Grass\u0026#34; || pokemon[3] == \u0026#34;Grass\u0026#34;) \u0026amp;\u0026amp; pokemon[6].to_i.between?(90, 100) } It\u0026rsquo;s a different syntax, but it looks a lot like a function. There are some operations on arrays that can take it and do stuff with it (https://ruby-doc.org/core-3.1.0/Array.html). In our case, we use select method\n1 pokemons.select{ |pokemon| (pokemon[2] == \u0026#34;Grass\u0026#34; || pokemon[3] == \u0026#34;Grass\u0026#34;) \u0026amp;\u0026amp; pokemon[6].to_i.between?(90, 100) } Additional Featurs The final code will be\n1 2 3 4 5 6 require \u0026#34;csv\u0026#34; CSV.read(\u0026#34;pokemon.csv\u0026#34;) .select {|pokemon| (pokemon[2] == \u0026#34;Grass\u0026#34; || pokemon[3] == \u0026#34;Grass\u0026#34;) \u0026amp;\u0026amp; pokemon[6].to_i.between?(90, 100) } .sort_by {|pokemon| pokemon[6].to_i} .each {|pokemon| puts pokemon.join(\u0026#39;,\u0026#39;)} with additional feature i.e. sort_by.\nFull list of method can be shown here https://ruby-doc.org/core-3.1.0/Array.html\nAdditional Resources There are lot of resources about block in Ruby:\nhttps://www.oreilly.com/content/using-blocks-in-ruby/ https://medium.com/@noordean/understanding-ruby-blocks-3a45d16891f1 ","date":"2022-01-02T00:00:00Z","image":"https://ayw.codeberg.page/images/ruby.png","permalink":"https://ayw.codeberg.page/p/ruby-project-csv/","title":"Ruby Mini Project: Reading and Filtering csv data"},{"content":"What we learn Manage separate files of Ruby Class Overriding Class Inheritance Initialize Method Variable Instance Menu Order We will create a console app like this\nProject Structure This is a small console app for ordering menu. Let create several ruby files within a folder called menu_app\n1 2 3 4 5 menu_app |- index.rb |- menu.rb |- food.rb └- drink.rb Creating files Main File index.rb In index.rb\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 require \u0026#34;./food\u0026#34; require \u0026#34;./drink\u0026#34; puts \u0026#34;All items are on sale on Sundays!\u0026#34; food1 = Food.new(name: \u0026#34;Pizza\u0026#34;, price: 8, calorie: 700) food2 = Food.new(name: \u0026#34;Sushi\u0026#34;, price: 10, calorie: 600) drink1 = Drink.new(name: \u0026#34;Cola\u0026#34;, price: 3, volume: 500) drink2 = Drink.new(name: \u0026#34;Tea\u0026#34;, price: 2, volume: 400) menus = [food1, food2, drink1, drink2] index = 0 menus.each do |menu| puts \u0026#34;#{index}. #{menu.info}\u0026#34; index += 1 end puts \u0026#34;--------------\u0026#34; puts \u0026#34;Select an item by its number:\u0026#34; order = gets.chomp.to_i selected_menu = menus[order] puts \u0026#34;You have selected: #{selected_menu.name}\u0026#34; puts \u0026#34;How many?(Buy 3 or more for $1 discount):\u0026#34; count = gets.chomp.to_i puts \u0026#34;The total price is $#{selected_menu.get_total_price(count)}\u0026#34; Parent Class menu.rb We put parent class in the file menu.rb with these following lines\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 require \u0026#34;date\u0026#34; class Menu attr_accessor :name attr_accessor :price def initialize(name:, price:) self.name = name self.price = price end def info return \u0026#34;#{self.name} $#{self.price}\u0026#34; end def get_total_price(count) total_price = self.price * count if count \u0026gt;= 3 total_price -= 1 end # Add an if statement if Menu.discount_day? \u0026amp;\u0026amp; count \u0026gt;= 1 total_price -= 1 end return total_price end def Menu.discount_day? today = Date.today return today.sunday? end end Child Class food.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 require \u0026#34;./menu\u0026#34; class Food \u0026lt; Menu attr_accessor :calorie def initialize(name:, price:, calorie:) super(name: name, price: price) self.calorie = calorie end def info return \u0026#34;#{self.name} $#{self.price} (#{self.calorie}kcal)\u0026#34; end def calorie_info return \u0026#34;#{self.name} is #{self.calorie}kcal\u0026#34; end end Child Class drink.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 require \u0026#34;./menu\u0026#34; class Drink \u0026lt; Menu attr_accessor :volume def initialize(name:, price:, volume:) super(name: name, price: price) self.volume = volume end def info return \u0026#34;#{self.name} $#{self.price} (#{self.volume}mL)\u0026#34; end end ","date":"2022-01-02T00:00:00Z","image":"https://ayw.codeberg.page/images/ruby.png","permalink":"https://ayw.codeberg.page/p/ruby-project-menu/","title":"Ruby Mini Project: Simple Menu Console App"},{"content":"Golang Courses 1. Golang Installation 2. Golang Operation 3. Object Oriented in Golang Golang Study Cases 1. SFTP in Go 2. Message Queue in Go 3. Mini Project: Read CSV in Go Ruby References 1. Ruby Documentation 2. Odin Project ","date":"2022-01-01T00:00:00Z","image":"https://ayw.codeberg.page/images/go.png","permalink":"https://ayw.codeberg.page/p/go-tutorial/","title":"Golang Tutorial"},{"content":"back to Ruby tutorial index\nVariables Variables are a way to access memory locations using an alias. Storing data to a variable is called assignment. Variables have multiple components: name, data, and type.\nTo use a variable, we must define it first. Like variable_name = value. In Ruby, = does not mean that the values are equal. It means to assign the value on the right to the variable on the left.\nVariable Scope Let us investigate this code\n1 2 3 4 5 6 7 8 9 10 post_count = 10 def report post_count = 5 puts post_count end report puts post count The code above will print 5 and then 10. Why? because post_count in method levl and outside not affect each other. If we want to have global variable that visible everywhere throghout the program, just put the dolar sign like $log_level.\nSelf Assignment We can use shorthand like\n1 2 3 4 5 x += 10 x -= 10 x *= 10 x /= 10 x %= 10 String Concatenation Combining strings is known as string concatenation. So if we put code like puts \u0026quot;Hello\u0026quot; + \u0026quot;Ruby\u0026quot;, it will produce output like \u0026quot;Hello Ruby\u0026quot;\nString Interpolation There\u0026rsquo;s a way to include the value of a variable inside a string. We can replace a variable with the value we assigned and include it in the string by inserting #{variable_name}, as shown below\n1 2 3 name = \u0026#34;Mina\u0026#34; age = 4 puts \u0026#34;Hello, my name is #{name}, I am #{age} year old\u0026#34; There\u0026rsquo;s one thing to be careful of with string interpolation. It can only be used in double quotes \u0026quot;. If it\u0026rsquo;s used with single quotes ', the variable won\u0026rsquo;t be replaced with it value.\nArrays We can use arrays to manage a group of data all at once. We can create an array as follows: [value1, value2, ...]. Each value in an array is known as an element. Using arrays, you can manage a collection of data as one group.\nExample Here are examples of array usage\n1 2 3 4 5 6 7 8 # assignment of string array names = [\u0026#34;Zahra\u0026#34;, \u0026#34;El\u0026#34;, \u0026#34;Mina\u0026#34;] # assignment of integer array numbers = [3,4,5] # array assignment of mix data type things = [\u0026#34;John\u0026#34;, 17, \u0026#34;married\u0026#34;] # print an array element puts \u0026#34;My name is #{names[0]}\u0026#34; For each element of an array, a number is given like 0, 1, 2, .... These number are known as index number.\nEach method The each method allows you to access each element of an array in a temporary variable, and apply the same code to it. For Instance, let\u0026rsquo;s try to print each name in the previous example\n1 2 3 names.each do |name| puts \u0026#34;My name is #{name}\u0026#34; end Hashes Like arrays, hashes are used to manage multiple groups of data. The difference is that hashes use keys instead of index numbers. With hashes, a key is paired with a value to form one element.\nExample 1 2 3 4 # arrays arrs = [value1, value2, value3] # hashes hashs = {key1 =\u0026gt; value1, key2 =\u0026gt; value2, key3 =\u0026gt; value3} We can get the value of an element using its key, by writing hash_name[key].\n1 2 user = {\u0026#34;name\u0026#34; =\u0026gt; \u0026#34;Mina\u0026#34;, \u0026#34;age\u0026#34; =\u0026gt; 4} puts user[\u0026#34;name\u0026#34;] The value of an element in the hash can be updated using hash_name[key]= new_value. If the key doesn\u0026rsquo;t exist yet, the element will be added to hash.\nSymbols in hashes The key of a hash can be written by prepending (adding in front) the key with a colon : instead of enclosing them with quote ' or double qoutes \u0026quot;. The way of writing :name is known as symbol. We can use the shorthand syntax of writing the hash key when using symbols. :key =\u0026gt; can be abbreviated to key:. The sample of hashes syntax are recap below\n1 2 3 4 5 6 # strings as keys person1 = {\u0026#34;name\u0026#34; =\u0026gt; \u0026#34;Mina\u0026#34;, \u0026#34;age\u0026#34; =\u0026gt; 4} # symbols as keys person2 = {:name =\u0026gt; \u0026#34;Zahra\u0026#34;, :age =\u0026gt; 5} # symbols as keys (shorthands) person3 = {name: \u0026#34;El\u0026#34;, age: 6} nil There is a special value in Ruby known as nil to express that a value doesn\u0026rsquo;t exist. Since nil means \u0026ldquo;nothing\u0026rdquo;, puts nil will print nothing.\n1 2 user = {name: \u0026#34;Mike\u0026#34;, age: 32} # asssignment puts user[:height] # will return nil We learn how to use nil in condition operator later.\nArray with Hash element We can use hashes as well as strings and numbers for array elements. Keep in mind that we often add a newline between each of the hash elements for better readability, as shown below\n1 2 3 4 students = [ {name: \u0026#34;Mina\u0026#34;, age: 4}, {name: \u0026#34;Zahra\u0026#34;, age: 5} ] We can access element using index/key and print each element using each method.\n1 2 3 students.each do |student| puts \u0026#34;hello, my name is #{student.name}, I\u0026#39;m #{student.age} years old\u0026#34; end The code will print\n1 2 \u0026#34;Hello, my name is Mina, I\u0026#39;m 4 years old\u0026#34; \u0026#34;Hello, my name is Zahra, I\u0026#39;m 5 years old\u0026#34; Condition Operators Comparison Operators Operators like \u0026gt;, \u0026lt;, \u0026gt;=, \u0026lt;=, ==, != are known as comparison operators.\nLogical Operators We can use logical operators to express AND or OR. \u0026amp;\u0026amp; is used for AND, and will return true only when both condition are true. The mathematical expression of 10 \u0026lt; x 30 will be expressed as x \u0026gt; 10 \u0026amp;\u0026amp; x \u0026lt; 20 will be expressed as x \u0026gt; 10 \u0026amp;\u0026amp; x \u0026lt; 20 in Ruby.\nIf statement The comparison and logical operators usually used in if statement.\n1 2 3 4 5 6 7 if condition1 # some code elsif condition2 # some code else condition3 # some code end Using nil When we use values that are nil, it will be treated like false, the code won\u0026rsquo;t be executed, and vice versa.\n1 2 3 4 5 6 biju1 = {name: \u0026#34;Kurama\u0026#34;, age: 234} if biju1[:age] puts \u0026#34;#{biju1[:name]} is #{biju1[:age] year old}\u0026#34; else puts \u0026#34;#{biju1[:name]}\u0026#39;s age is unknown}\u0026#34; end Method A method lets us combine multiple lines of code into a single unit. For example, we can define the introduce method to do two thinks\n1 2 3 4 def introduce puts \u0026#34;Hello\u0026#34; puts \u0026#34;I am Mina\u0026#34; end We can pass values to a method when we call it. These values are known as arguments, and can be used inside methods.\nTo pass an argument to a method, you have to define it with a variable to receive it. This variable in particular is called a parameter.\nThe relation between argument and paramaters is depict code below\n1 2 3 4 5 def method_name(parameter) # some code end method_name(argument) THe example using parameter and argument is shown below\n1 2 3 4 def greeting(name, age) puts \u0026#34;hello, my name is #{name}\u0026#34; puts \u0026#34;I am #{age} years old\u0026#34; end by passing argument to the method, e.g. greeting(\u0026quot;Mina\u0026quot;, 3), we\u0026rsquo;ll get output\n1 2 \u0026#34;hello, my name is Mina\u0026#34; \u0026#34;I am 3 years old\u0026#34; Method using default argument We can use default value of argument in parameter method like\n1 2 3 4 def greeting2(name = \u0026#34;foo\u0026#34;, age = 99, is_married = false) puts \u0026#34;hello, my name is #{name}\u0026#34; puts \u0026#34;I am #{age} years old\u0026#34; end If all parameters have default value like code above, then we can call method directly without passing any arguments like greeting2() or we can omit the parentheses greeting2. and the method will process default value.\nUsing parameter key(s) in greeting2 method is an optional. We can put this greeting2(name = \u0026quot;Mina Zahra\u0026quot;) or like this greeting2(\u0026quot;Mina Zahra\u0026quot;). And we should put the argument in correct order event we put parameter key. Run this method like greeting2(age = 33, name = \u0026quot;John\u0026quot;) will lead to misleading result like\n1 2 \u0026#34;hello, my name is 33\u0026#34; \u0026#34;I am John years old\u0026#34; Method using symbols Also we can use empty symbol like\n1 2 3 4 def greeting3(name:, age:, is_married: false) puts \u0026#34;hello, my name is #{name}\u0026#34; puts \u0026#34;I am #{age} years old\u0026#34; end In the method above, the usage of parameter key when we pass the argument is mandatory but you should not to put the pair of key and argument in correct orders. You can write like this greeting3(age: 77, name: \u0026quot;Jane\u0026quot;) and it will print the correct result.\nMethod with return To send a value to the origin of the method call, we use the return statement. By writing return value, the value can be returned and be used outside of the method.\n1 2 3 4 5 6 # example return value def add(a,b) return a + b end sum = add(3,4) puts sum As a convention, we add a question mark ? at the end of the method name if it returns a boolean value\n1 2 3 4 # example return bool def negative?(number) return number \u0026lt; 0 end By adding control flow, you can use return multiple times.\n1 2 3 4 5 6 def judge(score) if score \u0026gt; 80 return \u0026#34;Good Job\u0026#34; end return \u0026#34;You can do better\u0026#34; end Getting Input To receive input from the console, we use the gets.chomp method. gets.chomp will stop the execution, then wait for the input.\nLet\u0026rsquo;s make simple console app. Put all these lines into file called hello.rb\n1 2 3 puts \u0026#34;Enter your name:\u0026#34; name = gets.chomp puts \u0026#34;Hello #{name}\u0026#34; run the file ruby hello.rb, enter your name and TADA your first console app in Ruby created !\nBecause the value received from gets.chomp will be string, even if 98 is entered, it will be treated as string \u0026quot;98\u0026quot;. To convert it to integer, we use to_i method.\nLet\u0026rsquo;s improve our previous app\n1 2 3 4 5 6 puts \u0026#34;Enter your name:\u0026#34; name = gets.chomp puts \u0026#34;What is your birthyear:\u0026#34; birthyear = gets.chomp.to_i puts \u0026#34;Hello #{name}\u0026#34; puts \u0026#34;your age is #{2022-birthyear}\u0026#34; Class For example we want to make book rental app. In programming, by treating each book as an object, we can easily manage multiple books. To create an object, you first need to prepare its blueprint. In programming terms, this blueprint is commonly known as the class, and each object is known as an instance.\n1 2 3 class Book attr_accessor :title, :author end Class Naming Convetion Class names start with a capital letter or using PascalCase Capitalize abbreviations: XMLParser, JSONRequest Instance Methods The methods defined inside a class are called instance method, as they are to be called from an instance. For instance below we created a instance method called description to put all together book information in a single sentence.\n1 2 3 4 5 6 7 8 9 10 11 12 class Book attr_accessor :title, :author def description puts \u0026#34;Book titled \u0026#39;#{self.title}\u0026#39; is written by #{self.author}\u0026#34; end end book1 = Book.new book1.title = \u0026#34;Sang Pemimpi\u0026#34; book1.author = \u0026#34;Andre Hinata\u0026#34; book1.description Initialize Method The initialize method can be defined just like other instance methods. Our previous code will look like:\n1 2 3 4 5 6 7 8 9 10 11 class Book attr_accessor :title, :author def initialize(title:, author:) self.title = title self.author = author end def description puts \u0026#34;Book titled \u0026#39;#{self.title}\u0026#39; is written by #{self.author}\u0026#34; end end ... self in code above is referring to instance variable.\nSeparating Files Let us move the Book class to a different file called book.rb to keep each file simple and manageable. The structure of files will look like\n1 2 3 book_app |- book.rb └- index.rb In the book.rb put only Book class\n1 2 3 4 5 6 7 8 9 10 class Book attr_accessor :title, :author def initialize(title:, author:) self.title = title self.author = author end def description puts \u0026#34;Book titled \u0026#39;#{self.title}\u0026#39; is written by #{self.author}\u0026#34; end end And in the index.rb, where the program is executed, put these lines\n1 2 3 4 5 book1 = Book.new book1.title = \u0026#34;Sang Pemimpi\u0026#34; book1.author = \u0026#34;Andre Hinata\u0026#34; book1.description Class Inheritance Let assume that we run an online restaurant that sell foods, Then we should create Menu as an object.\nThe product class can be written as\n1 2 3 4 5 6 7 8 9 10 class Menu attr_accessor :name, :price def initialize(name:, price:) self.name = name self.price = price end def info return \u0026#34;#{self.name} $#{self.price}\u0026#34; end end Creating a class based on another class is known as inheritance. Child class is referring to the new class, while parent class is referring to the class used as a base. You can use inheritance as follow: class ChildClass \u0026lt; ParentClass.\n1 2 3 class Food \u0026lt; Menu end The child class has access to all the instance variables and methods of the parent class.\n1 2 3 menu1 = Food.new(name: \u0026#34;Plecing\u0026#34;, price: 2) puts menu1.name puts menu1.info Adding instance variable to child To add an instance variable to the child class, we can again use attr_accessor. In the example below, the Food class has the calorie instance variable in addition to the name and price variables defined in the Menu class.\n1 2 3 class Food \u0026lt; Menu attr_accessor :calorie end Super To avoid duplications during initializing the name and price in the child class Food, We use super\n1 2 3 4 5 6 7 8 class Food \u0026lt; Menu def initialize(name:, price:, calorie:) self.name = name self.price = price self.calorie = calorie end ... end After using super, the code will be\n1 2 3 4 5 6 7 class Food \u0026lt; Menu def initialize(name:, price:, calorie:) super(name: name, price: price) self.calorie = calorie end ... end Adding Instance methods We also can add instance methods to the child class\n1 2 3 4 5 6 7 class Food \u0026lt; Menu attr_accessor :calorie ... def calorie_info return \u0026#34;#{self.name} is #{self.calorie}kcal\u0026#34; end end Overiding Since we want to display calorie in the info method. We will be overriding the info method in the Food class.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Food \u0026lt; Menu attr_accessor :calorie def initialize(name:, price:, calorie:) super(name: name, price: price) self.calorie = calorie end def info return \u0026#34;#{self.name} $#{self.price} (#{self.calorie}kcal)\u0026#34; end def calorie_info return \u0026#34;#{self.name} is #{self.calorie}kcal\u0026#34; end end Define a class method We can define a class method like def ClassName.method_name. Note that unlike instance method, we have to put the class name before the method name.\n1 2 3 4 5 6 7 class Menu ... def Menu.discount_day? today = Date.today return today.sunday? end ... Sample Project back to Ruby tutorial index\n","date":"2022-01-01T00:00:00Z","image":"https://ayw.codeberg.page/images/ruby.png","permalink":"https://ayw.codeberg.page/p/ruby-basic/","title":"Ruby Basic Operation"}]